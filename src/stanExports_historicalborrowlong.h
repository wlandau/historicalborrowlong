// Generated by rstantools.  Do not edit by hand.

/*
    historicalborrowlong is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    historicalborrowlong is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with historicalborrowlong.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_historicalborrowlong_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 230> locations_array__ =
  {" (found before start of program)",
  " (in 'historicalborrowlong', line 105, column 2 to column 30)",
  " (in 'historicalborrowlong', line 106, column 2 to column 28)",
  " (in 'historicalborrowlong', line 107, column 2 to column 18)",
  " (in 'historicalborrowlong', line 108, column 2 to column 41)",
  " (in 'historicalborrowlong', line 109, column 2 to column 24)",
  " (in 'historicalborrowlong', line 110, column 2 to column 22)",
  " (in 'historicalborrowlong', line 111, column 2 to column 60)",
  " (in 'historicalborrowlong', line 112, column 2 to column 69)",
  " (in 'historicalborrowlong', line 113, column 2 to column 75)",
  " (in 'historicalborrowlong', line 114, column 2 to column 54)",
  " (in 'historicalborrowlong', line 115, column 2 to column 60)",
  " (in 'historicalborrowlong', line 118, column 2 to column 24)",
  " (in 'historicalborrowlong', line 119, column 2 to column 35)",
  " (in 'historicalborrowlong', line 120, column 2 to column 58)",
  " (in 'historicalborrowlong', line 122, column 4 to column 14)",
  " (in 'historicalborrowlong', line 123, column 4 to column 19)",
  " (in 'historicalborrowlong', line 124, column 4 to column 20)",
  " (in 'historicalborrowlong', line 125, column 4 to column 14)",
  " (in 'historicalborrowlong', line 126, column 4 to column 14)",
  " (in 'historicalborrowlong', line 127, column 4 to column 14)",
  " (in 'historicalborrowlong', line 128, column 4 to column 14)",
  " (in 'historicalborrowlong', line 129, column 11 to column 22)",
  " (in 'historicalborrowlong', line 129, column 4 to column 37)",
  " (in 'historicalborrowlong', line 130, column 11 to column 22)",
  " (in 'historicalborrowlong', line 130, column 4 to column 37)",
  " (in 'historicalborrowlong', line 131, column 11 to column 20)",
  " (in 'historicalborrowlong', line 131, column 4 to column 36)",
  " (in 'historicalborrowlong', line 132, column 11 to column 20)",
  " (in 'historicalborrowlong', line 132, column 4 to column 28)",
  " (in 'historicalborrowlong', line 133, column 11 to column 16)",
  " (in 'historicalborrowlong', line 133, column 18 to column 27)",
  " (in 'historicalborrowlong', line 133, column 4 to column 42)",
  " (in 'historicalborrowlong', line 134, column 11 to column 20)",
  " (in 'historicalborrowlong', line 134, column 4 to column 32)",
  " (in 'historicalborrowlong', line 135, column 11 to column 16)",
  " (in 'historicalborrowlong', line 135, column 18 to column 27)",
  " (in 'historicalborrowlong', line 135, column 4 to column 38)",
  " (in 'historicalborrowlong', line 141, column 6 to column 24)",
  " (in 'historicalborrowlong', line 140, column 11 to line 142, column 5)",
  " (in 'historicalborrowlong', line 139, column 6 to column 72)",
  " (in 'historicalborrowlong', line 138, column 25 to line 140, column 5)",
  " (in 'historicalborrowlong', line 138, column 4 to line 142, column 5)",
  " (in 'historicalborrowlong', line 143, column 4 to column 24)",
  " (in 'historicalborrowlong', line 144, column 4 to column 42)",
  " (in 'historicalborrowlong', line 145, column 4 to column 24)",
  " (in 'historicalborrowlong', line 146, column 4 to column 42)",
  " (in 'historicalborrowlong', line 149, column 4 to column 45)",
  " (in 'historicalborrowlong', line 152, column 8 to column 36)",
  " (in 'historicalborrowlong', line 153, column 8 to column 36)",
  " (in 'historicalborrowlong', line 154, column 8 to column 32)",
  " (in 'historicalborrowlong', line 155, column 8 to column 32)",
  " (in 'historicalborrowlong', line 156, column 8 to line 159, column 11)",
  " (in 'historicalborrowlong', line 151, column 34 to line 160, column 7)",
  " (in 'historicalborrowlong', line 151, column 6 to line 160, column 7)",
  " (in 'historicalborrowlong', line 150, column 20 to line 161, column 5)",
  " (in 'historicalborrowlong', line 150, column 4 to line 161, column 5)",
  " (in 'historicalborrowlong', line 169, column 6 to column 78)",
  " (in 'historicalborrowlong', line 168, column 11 to line 170, column 5)",
  " (in 'historicalborrowlong', line 165, column 6 to line 167, column 35)",
  " (in 'historicalborrowlong', line 164, column 20 to line 168, column 5)",
  " (in 'historicalborrowlong', line 164, column 4 to line 170, column 5)",
  " (in 'historicalborrowlong', line 184, column 6 to column 65)",
  " (in 'historicalborrowlong', line 183, column 11 to line 185, column 5)",
  " (in 'historicalborrowlong', line 179, column 6 to line 182, column 8)",
  " (in 'historicalborrowlong', line 178, column 53 to line 183, column 5)",
  " (in 'historicalborrowlong', line 178, column 11 to line 185, column 5)",
  " (in 'historicalborrowlong', line 174, column 6 to line 177, column 8)",
  " (in 'historicalborrowlong', line 173, column 55 to line 178, column 5)",
  " (in 'historicalborrowlong', line 173, column 4 to line 185, column 5)",
  " (in 'historicalborrowlong', line 200, column 8 to column 55)",
  " (in 'historicalborrowlong', line 199, column 13 to line 201, column 7)",
  " (in 'historicalborrowlong', line 195, column 8 to line 198, column 10)",
  " (in 'historicalborrowlong', line 194, column 58 to line 199, column 7)",
  " (in 'historicalborrowlong', line 194, column 13 to line 201, column 7)",
  " (in 'historicalborrowlong', line 190, column 8 to line 193, column 10)",
  " (in 'historicalborrowlong', line 189, column 60 to line 194, column 7)",
  " (in 'historicalborrowlong', line 189, column 6 to line 201, column 7)",
  " (in 'historicalborrowlong', line 188, column 31 to line 202, column 5)",
  " (in 'historicalborrowlong', line 188, column 4 to line 202, column 5)",
  " (in 'historicalborrowlong', line 206, column 6 to line 208, column 21)",
  " (in 'historicalborrowlong', line 205, column 37 to line 209, column 5)",
  " (in 'historicalborrowlong', line 205, column 4 to line 209, column 5)",
  " (in 'historicalborrowlong', line 212, column 4 to column 14)",
  " (in 'historicalborrowlong', line 214, column 6 to column 61)",
  " (in 'historicalborrowlong', line 215, column 6 to column 61)",
  " (in 'historicalborrowlong', line 216, column 6 to column 21)",
  " (in 'historicalborrowlong', line 213, column 33 to line 217, column 5)",
  " (in 'historicalborrowlong', line 213, column 4 to line 217, column 5)",
  " (in 'historicalborrowlong', line 218, column 4 to column 38)",
  " (in 'historicalborrowlong', line 121, column 2 to line 219, column 3)",
  " (in 'historicalborrowlong', line 223, column 2 to column 12)",
  " (in 'historicalborrowlong', line 224, column 2 to column 10)",
  " (in 'historicalborrowlong', line 225, column 2 to column 13)",
  " (in 'historicalborrowlong', line 227, column 4 to column 39)",
  " (in 'historicalborrowlong', line 228, column 4 to column 36)",
  " (in 'historicalborrowlong', line 229, column 4 to column 29)",
  " (in 'historicalborrowlong', line 230, column 4 to line 235, column 6)",
  " (in 'historicalborrowlong', line 226, column 27 to line 236, column 3)",
  " (in 'historicalborrowlong', line 226, column 2 to line 236, column 3)",
  " (in 'historicalborrowlong', line 243, column 4 to column 35)",
  " (in 'historicalborrowlong', line 242, column 9 to line 244, column 3)",
  " (in 'historicalborrowlong', line 239, column 4 to column 29)",
  " (in 'historicalborrowlong', line 240, column 4 to column 25)",
  " (in 'historicalborrowlong', line 241, column 4 to column 28)",
  " (in 'historicalborrowlong', line 238, column 23 to line 242, column 3)",
  " (in 'historicalborrowlong', line 238, column 2 to line 244, column 3)",
  " (in 'historicalborrowlong', line 245, column 2 to column 29)",
  " (in 'historicalborrowlong', line 246, column 2 to column 27)",
  " (in 'historicalborrowlong', line 248, column 4 to column 35)",
  " (in 'historicalborrowlong', line 247, column 23 to line 249, column 3)",
  " (in 'historicalborrowlong', line 247, column 2 to line 249, column 3)",
  " (in 'historicalborrowlong', line 253, column 4 to column 33)",
  " (in 'historicalborrowlong', line 252, column 51 to line 254, column 3)",
  " (in 'historicalborrowlong', line 252, column 9 to line 254, column 3)",
  " (in 'historicalborrowlong', line 251, column 4 to column 52)",
  " (in 'historicalborrowlong', line 250, column 53 to line 252, column 3)",
  " (in 'historicalborrowlong', line 250, column 2 to line 254, column 3)",
  " (in 'historicalborrowlong', line 260, column 4 to column 36)",
  " (in 'historicalborrowlong', line 259, column 54 to line 261, column 3)",
  " (in 'historicalborrowlong', line 259, column 9 to line 261, column 3)",
  " (in 'historicalborrowlong', line 257, column 6 to column 57)",
  " (in 'historicalborrowlong', line 256, column 37 to line 258, column 5)",
  " (in 'historicalborrowlong', line 256, column 4 to line 258, column 5)",
  " (in 'historicalborrowlong', line 255, column 56 to line 259, column 3)",
  " (in 'historicalborrowlong', line 255, column 2 to line 261, column 3)",
  " (in 'historicalborrowlong', line 57, column 2 to column 34)",
  " (in 'historicalborrowlong', line 58, column 2 to column 23)",
  " (in 'historicalborrowlong', line 59, column 2 to column 20)",
  " (in 'historicalborrowlong', line 60, column 2 to column 21)",
  " (in 'historicalborrowlong', line 61, column 2 to column 23)",
  " (in 'historicalborrowlong', line 62, column 2 to column 22)",
  " (in 'historicalborrowlong', line 63, column 2 to column 25)",
  " (in 'historicalborrowlong', line 64, column 2 to column 25)",
  " (in 'historicalborrowlong', line 65, column 2 to column 25)",
  " (in 'historicalborrowlong', line 66, column 2 to column 21)",
  " (in 'historicalborrowlong', line 67, column 2 to column 23)",
  " (in 'historicalborrowlong', line 68, column 2 to column 30)",
  " (in 'historicalborrowlong', line 69, column 2 to column 32)",
  " (in 'historicalborrowlong', line 70, column 2 to column 35)",
  " (in 'historicalborrowlong', line 71, column 2 to column 29)",
  " (in 'historicalborrowlong', line 72, column 2 to column 32)",
  " (in 'historicalborrowlong', line 73, column 8 to column 15)",
  " (in 'historicalborrowlong', line 73, column 2 to column 46)",
  " (in 'historicalborrowlong', line 74, column 8 to column 15)",
  " (in 'historicalborrowlong', line 74, column 2 to column 50)",
  " (in 'historicalborrowlong', line 75, column 8 to column 17)",
  " (in 'historicalborrowlong', line 75, column 2 to column 46)",
  " (in 'historicalborrowlong', line 76, column 2 to column 24)",
  " (in 'historicalborrowlong', line 77, column 2 to column 21)",
  " (in 'historicalborrowlong', line 78, column 2 to column 22)",
  " (in 'historicalborrowlong', line 79, column 2 to column 23)",
  " (in 'historicalborrowlong', line 80, column 2 to column 24)",
  " (in 'historicalborrowlong', line 81, column 2 to column 24)",
  " (in 'historicalborrowlong', line 82, column 2 to column 25)",
  " (in 'historicalborrowlong', line 83, column 8 to column 17)",
  " (in 'historicalborrowlong', line 83, column 2 to column 40)",
  " (in 'historicalborrowlong', line 84, column 8 to column 17)",
  " (in 'historicalborrowlong', line 84, column 2 to column 46)",
  " (in 'historicalborrowlong', line 85, column 8 to column 17)",
  " (in 'historicalborrowlong', line 85, column 2 to column 44)",
  " (in 'historicalborrowlong', line 86, column 8 to column 15)",
  " (in 'historicalborrowlong', line 86, column 2 to column 46)",
  " (in 'historicalborrowlong', line 87, column 8 to column 17)",
  " (in 'historicalborrowlong', line 87, column 2 to column 49)",
  " (in 'historicalborrowlong', line 88, column 8 to column 17)",
  " (in 'historicalborrowlong', line 88, column 2 to column 49)",
  " (in 'historicalborrowlong', line 89, column 8 to column 22)",
  " (in 'historicalborrowlong', line 89, column 2 to column 54)",
  " (in 'historicalborrowlong', line 90, column 8 to column 22)",
  " (in 'historicalborrowlong', line 90, column 2 to column 54)",
  " (in 'historicalborrowlong', line 91, column 8 to column 22)",
  " (in 'historicalborrowlong', line 91, column 2 to column 50)",
  " (in 'historicalborrowlong', line 92, column 8 to column 22)",
  " (in 'historicalborrowlong', line 92, column 2 to column 50)",
  " (in 'historicalborrowlong', line 93, column 8 to column 17)",
  " (in 'historicalborrowlong', line 93, column 2 to column 62)",
  " (in 'historicalborrowlong', line 94, column 9 to column 18)",
  " (in 'historicalborrowlong', line 94, column 2 to column 22)",
  " (in 'historicalborrowlong', line 95, column 9 to column 18)",
  " (in 'historicalborrowlong', line 95, column 20 to column 27)",
  " (in 'historicalborrowlong', line 95, column 2 to column 37)",
  " (in 'historicalborrowlong', line 96, column 9 to column 18)",
  " (in 'historicalborrowlong', line 96, column 20 to column 27)",
  " (in 'historicalborrowlong', line 96, column 2 to column 37)",
  " (in 'historicalborrowlong', line 97, column 9 to column 15)",
  " (in 'historicalborrowlong', line 97, column 17 to column 26)",
  " (in 'historicalborrowlong', line 97, column 2 to column 35)",
  " (in 'historicalborrowlong', line 98, column 2 to column 42)",
  " (in 'historicalborrowlong', line 99, column 2 to column 45)",
  " (in 'historicalborrowlong', line 100, column 2 to column 30)",
  " (in 'historicalborrowlong', line 101, column 2 to column 21)",
  " (in 'historicalborrowlong', line 102, column 2 to column 26)",
  " (in 'historicalborrowlong', line 105, column 9 to column 18)",
  " (in 'historicalborrowlong', line 106, column 9 to column 16)",
  " (in 'historicalborrowlong', line 107, column 9 to column 13)",
  " (in 'historicalborrowlong', line 108, column 30 to column 35)",
  " (in 'historicalborrowlong', line 109, column 9 to column 16)",
  " (in 'historicalborrowlong', line 110, column 9 to column 15)",
  " (in 'historicalborrowlong', line 111, column 8 to column 15)",
  " (in 'historicalborrowlong', line 111, column 47 to column 52)",
  " (in 'historicalborrowlong', line 112, column 8 to column 24)",
  " (in 'historicalborrowlong', line 112, column 47 to column 52)",
  " (in 'historicalborrowlong', line 113, column 8 to column 27)",
  " (in 'historicalborrowlong', line 113, column 50 to column 55)",
  " (in 'historicalborrowlong', line 114, column 27 to column 40)",
  " (in 'historicalborrowlong', line 115, column 27 to column 43)",
  " (in 'historicalborrowlong', line 118, column 9 to column 16)",
  " (in 'historicalborrowlong', line 119, column 9 to column 14)",
  " (in 'historicalborrowlong', line 119, column 16 to column 25)",
  " (in 'historicalborrowlong', line 120, column 8 to column 15)",
  " (in 'historicalborrowlong', line 120, column 24 to column 29)",
  " (in 'historicalborrowlong', line 120, column 31 to column 36)",
  " (in 'historicalborrowlong', line 24, column 4 to line 25, column 36)",
  " (in 'historicalborrowlong', line 23, column 64 to line 26, column 3)",
  " (in 'historicalborrowlong', line 42, column 4 to column 39)",
  " (in 'historicalborrowlong', line 43, column 11 to column 12)",
  " (in 'historicalborrowlong', line 43, column 14 to column 15)",
  " (in 'historicalborrowlong', line 43, column 4 to column 43)",
  " (in 'historicalborrowlong', line 44, column 4 to column 20)",
  " (in 'historicalborrowlong', line 46, column 6 to column 32)",
  " (in 'historicalborrowlong', line 45, column 19 to line 47, column 5)",
  " (in 'historicalborrowlong', line 45, column 4 to line 47, column 5)",
  " (in 'historicalborrowlong', line 50, column 8 to column 42)",
  " (in 'historicalborrowlong', line 49, column 21 to line 51, column 7)",
  " (in 'historicalborrowlong', line 49, column 6 to line 51, column 7)",
  " (in 'historicalborrowlong', line 48, column 19 to line 52, column 5)",
  " (in 'historicalborrowlong', line 48, column 4 to line 52, column 5)",
  " (in 'historicalborrowlong', line 53, column 4 to column 15)",
  " (in 'historicalborrowlong', line 41, column 39 to line 54, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,1,-1>
log_normal_kernel(const T0__& cholesky_arg__, const T1__& epsilon_arg__,
                  std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>
ar1_cholesky(const T0__& rho, const int& n, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,1,-1>
log_normal_kernel(const T0__& cholesky_arg__, const T1__& epsilon_arg__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& cholesky = stan::math::to_ref(cholesky_arg__);
  const auto& epsilon = stan::math::to_ref(epsilon_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 213;
    return stan::math::subtract(
             stan::math::multiply(-0.5,
               stan::math::columns_dot_self(
                 stan::math::mdivide_left_tri_low(cholesky, epsilon))),
             stan::math::sum(stan::math::log(stan::math::diagonal(cholesky))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>
ar1_cholesky(const T0__& rho, const int& n, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ scale = DUMMY_VAR__;
    current_statement__ = 215;
    scale = stan::math::sqrt((1 - (rho * rho)));
    current_statement__ = 216;
    stan::math::validate_non_negative_index("out", "n", n);
    current_statement__ = 217;
    stan::math::validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> out =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, n, DUMMY_VAR__);
    current_statement__ = 218;
    stan::model::assign(out, stan::math::rep_matrix(0, n, n),
      "assigning variable out");
    current_statement__ = 219;
    stan::model::assign(out, 1.0, "assigning variable out",
      stan::model::index_uni(1), stan::model::index_uni(1));
    current_statement__ = 222;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 220;
      stan::model::assign(out, stan::math::pow(rho, (i - 1)),
        "assigning variable out", stan::model::index_uni(i),
        stan::model::index_uni(1));
    }
    current_statement__ = 227;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 225;
      for (int j = 2; j <= i; ++j) {
        current_statement__ = 223;
        stan::model::assign(out, (scale * stan::math::pow(rho, (i - j))),
          "assigning variable out", stan::model::index_uni(i),
          stan::model::index_uni(j));
      }
    }
    current_statement__ = 228;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_historicalborrowlong final : public model_base_crtp<model_historicalborrowlong> {
private:
  int model_type;
  int n_alpha;
  int n_mu;
  int n_tau;
  int n_delta;
  int n_beta;
  int n_observe;
  int n_missing;
  int n_patient;
  int n_rep;
  int n_study;
  int n_study_x_beta;
  int n_lambda_current;
  int n_lambda_historical;
  int n_rho_current;
  int n_rho_historical;
  std::vector<int> n_patient_study;
  std::vector<int> index_patient_study;
  std::vector<int> index_patient;
  double s_alpha;
  double s_mu;
  double s_tau;
  double s_beta;
  double s_delta;
  double s_sigma;
  double s_lambda;
  std::vector<int> missing;
  std::vector<int> count_missing;
  std::vector<int> study_index;
  std::vector<int> alpha_rep_index;
  std::vector<int> alpha_data_index;
  std::vector<int> delta_data_index;
  std::vector<int> x_beta_col_index;
  std::vector<int> x_beta_row_index;
  std::vector<int> x_beta_col_n;
  std::vector<int> x_beta_row_n;
  std::vector<int> study_patient;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> x_alpha_data__;
  Eigen::Matrix<double,-1,-1> x_delta_data__;
  Eigen::Matrix<double,-1,-1> x_beta_data__;
  int covariance_current;
  int covariance_historical;
  int covariance_unstructured;
  int covariance_ar1;
  int covariance_diagonal;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_alpha{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_delta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_beta{nullptr, 0, 0};
public:
  ~model_historicalborrowlong() {}
  model_historicalborrowlong(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_historicalborrowlong_namespace::model_historicalborrowlong";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 126;
      context__.validate_dims("data initialization", "model_type", "int",
        std::vector<size_t>{});
      model_type = std::numeric_limits<int>::min();
      current_statement__ = 126;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "model_type",
        model_type, 1);
      current_statement__ = 126;
      stan::math::check_less_or_equal(function__, "model_type", model_type, 3);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "n_alpha", "int",
        std::vector<size_t>{});
      n_alpha = std::numeric_limits<int>::min();
      current_statement__ = 127;
      n_alpha = context__.vals_i("n_alpha")[(1 - 1)];
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "n_alpha", n_alpha, 0);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "n_mu", "int",
        std::vector<size_t>{});
      n_mu = std::numeric_limits<int>::min();
      current_statement__ = 128;
      n_mu = context__.vals_i("n_mu")[(1 - 1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "n_mu", n_mu, 0);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "n_tau", "int",
        std::vector<size_t>{});
      n_tau = std::numeric_limits<int>::min();
      current_statement__ = 129;
      n_tau = context__.vals_i("n_tau")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "n_tau", n_tau, 0);
      current_statement__ = 130;
      context__.validate_dims("data initialization", "n_delta", "int",
        std::vector<size_t>{});
      n_delta = std::numeric_limits<int>::min();
      current_statement__ = 130;
      n_delta = context__.vals_i("n_delta")[(1 - 1)];
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "n_delta", n_delta, 0);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "n_beta", "int",
        std::vector<size_t>{});
      n_beta = std::numeric_limits<int>::min();
      current_statement__ = 131;
      n_beta = context__.vals_i("n_beta")[(1 - 1)];
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "n_beta", n_beta, 0);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "n_observe", "int",
        std::vector<size_t>{});
      n_observe = std::numeric_limits<int>::min();
      current_statement__ = 132;
      n_observe = context__.vals_i("n_observe")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "n_observe", n_observe,
        0);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "n_missing", "int",
        std::vector<size_t>{});
      n_missing = std::numeric_limits<int>::min();
      current_statement__ = 133;
      n_missing = context__.vals_i("n_missing")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "n_missing", n_missing,
        0);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "n_patient", "int",
        std::vector<size_t>{});
      n_patient = std::numeric_limits<int>::min();
      current_statement__ = 134;
      n_patient = context__.vals_i("n_patient")[(1 - 1)];
      current_statement__ = 134;
      stan::math::check_greater_or_equal(function__, "n_patient", n_patient,
        0);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "n_rep", "int",
        std::vector<size_t>{});
      n_rep = std::numeric_limits<int>::min();
      current_statement__ = 135;
      n_rep = context__.vals_i("n_rep")[(1 - 1)];
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "n_rep", n_rep, 0);
      current_statement__ = 136;
      context__.validate_dims("data initialization", "n_study", "int",
        std::vector<size_t>{});
      n_study = std::numeric_limits<int>::min();
      current_statement__ = 136;
      n_study = context__.vals_i("n_study")[(1 - 1)];
      current_statement__ = 136;
      stan::math::check_greater_or_equal(function__, "n_study", n_study, 0);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "n_study_x_beta", "int",
        std::vector<size_t>{});
      n_study_x_beta = std::numeric_limits<int>::min();
      current_statement__ = 137;
      n_study_x_beta = context__.vals_i("n_study_x_beta")[(1 - 1)];
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "n_study_x_beta",
        n_study_x_beta, 0);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "n_lambda_current",
        "int", std::vector<size_t>{});
      n_lambda_current = std::numeric_limits<int>::min();
      current_statement__ = 138;
      n_lambda_current = context__.vals_i("n_lambda_current")[(1 - 1)];
      current_statement__ = 138;
      stan::math::check_greater_or_equal(function__, "n_lambda_current",
        n_lambda_current, 0);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "n_lambda_historical",
        "int", std::vector<size_t>{});
      n_lambda_historical = std::numeric_limits<int>::min();
      current_statement__ = 139;
      n_lambda_historical = context__.vals_i("n_lambda_historical")[(1 - 1)];
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "n_lambda_historical",
        n_lambda_historical, 0);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "n_rho_current", "int",
        std::vector<size_t>{});
      n_rho_current = std::numeric_limits<int>::min();
      current_statement__ = 140;
      n_rho_current = context__.vals_i("n_rho_current")[(1 - 1)];
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "n_rho_current",
        n_rho_current, 0);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "n_rho_historical",
        "int", std::vector<size_t>{});
      n_rho_historical = std::numeric_limits<int>::min();
      current_statement__ = 141;
      n_rho_historical = context__.vals_i("n_rho_historical")[(1 - 1)];
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "n_rho_historical",
        n_rho_historical, 0);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("n_patient_study", "n_study",
        n_study);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "n_patient_study",
        "int", std::vector<size_t>{static_cast<size_t>(n_study)});
      n_patient_study = std::vector<int>(n_study,
                          std::numeric_limits<int>::min());
      current_statement__ = 143;
      n_patient_study = context__.vals_i("n_patient_study");
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "n_patient_study",
        n_patient_study, 0);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("index_patient_study",
        "n_study", n_study);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "index_patient_study",
        "int", std::vector<size_t>{static_cast<size_t>(n_study)});
      index_patient_study = std::vector<int>(n_study,
                              std::numeric_limits<int>::min());
      current_statement__ = 145;
      index_patient_study = context__.vals_i("index_patient_study");
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "index_patient_study",
        index_patient_study, 0);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("index_patient", "n_observe",
        n_observe);
      current_statement__ = 147;
      context__.validate_dims("data initialization", "index_patient", "int",
        std::vector<size_t>{static_cast<size_t>(n_observe)});
      index_patient = std::vector<int>(n_observe,
                        std::numeric_limits<int>::min());
      current_statement__ = 147;
      index_patient = context__.vals_i("index_patient");
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "index_patient",
        index_patient, 0);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "s_alpha", "double",
        std::vector<size_t>{});
      s_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 148;
      s_alpha = context__.vals_r("s_alpha")[(1 - 1)];
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "s_alpha", s_alpha, 0);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "s_mu", "double",
        std::vector<size_t>{});
      s_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 149;
      s_mu = context__.vals_r("s_mu")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "s_mu", s_mu, 0);
      current_statement__ = 150;
      context__.validate_dims("data initialization", "s_tau", "double",
        std::vector<size_t>{});
      s_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 150;
      s_tau = context__.vals_r("s_tau")[(1 - 1)];
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__, "s_tau", s_tau, 0);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "s_beta", "double",
        std::vector<size_t>{});
      s_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      s_beta = context__.vals_r("s_beta")[(1 - 1)];
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "s_beta", s_beta, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization", "s_delta", "double",
        std::vector<size_t>{});
      s_delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      s_delta = context__.vals_r("s_delta")[(1 - 1)];
      current_statement__ = 152;
      stan::math::check_greater_or_equal(function__, "s_delta", s_delta, 0);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "s_sigma", "double",
        std::vector<size_t>{});
      s_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 153;
      s_sigma = context__.vals_r("s_sigma")[(1 - 1)];
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "s_sigma", s_sigma, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "s_lambda", "double",
        std::vector<size_t>{});
      s_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 154;
      s_lambda = context__.vals_r("s_lambda")[(1 - 1)];
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "s_lambda", s_lambda, 0);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("missing", "n_observe",
        n_observe);
      current_statement__ = 156;
      context__.validate_dims("data initialization", "missing", "int",
        std::vector<size_t>{static_cast<size_t>(n_observe)});
      missing = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      current_statement__ = 156;
      missing = context__.vals_i("missing");
      current_statement__ = 156;
      stan::math::check_greater_or_equal(function__, "missing", missing, 0);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("count_missing", "n_observe",
        n_observe);
      current_statement__ = 158;
      context__.validate_dims("data initialization", "count_missing", "int",
        std::vector<size_t>{static_cast<size_t>(n_observe)});
      count_missing = std::vector<int>(n_observe,
                        std::numeric_limits<int>::min());
      current_statement__ = 158;
      count_missing = context__.vals_i("count_missing");
      current_statement__ = 158;
      stan::math::check_greater_or_equal(function__, "count_missing",
        count_missing, 0);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("study_index", "n_observe",
        n_observe);
      current_statement__ = 160;
      context__.validate_dims("data initialization", "study_index", "int",
        std::vector<size_t>{static_cast<size_t>(n_observe)});
      study_index = std::vector<int>(n_observe,
                      std::numeric_limits<int>::min());
      current_statement__ = 160;
      study_index = context__.vals_i("study_index");
      current_statement__ = 160;
      stan::math::check_greater_or_equal(function__, "study_index",
        study_index, 0);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("alpha_rep_index", "n_alpha",
        n_alpha);
      current_statement__ = 162;
      context__.validate_dims("data initialization", "alpha_rep_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_alpha)});
      alpha_rep_index = std::vector<int>(n_alpha,
                          std::numeric_limits<int>::min());
      current_statement__ = 162;
      alpha_rep_index = context__.vals_i("alpha_rep_index");
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "alpha_rep_index",
        alpha_rep_index, 0);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("alpha_data_index",
        "n_observe", n_observe);
      current_statement__ = 164;
      context__.validate_dims("data initialization", "alpha_data_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_observe)});
      alpha_data_index = std::vector<int>(n_observe,
                           std::numeric_limits<int>::min());
      current_statement__ = 164;
      alpha_data_index = context__.vals_i("alpha_data_index");
      current_statement__ = 164;
      stan::math::check_greater_or_equal(function__, "alpha_data_index",
        alpha_data_index, 0);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("delta_data_index",
        "n_observe", n_observe);
      current_statement__ = 166;
      context__.validate_dims("data initialization", "delta_data_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_observe)});
      delta_data_index = std::vector<int>(n_observe,
                           std::numeric_limits<int>::min());
      current_statement__ = 166;
      delta_data_index = context__.vals_i("delta_data_index");
      current_statement__ = 166;
      stan::math::check_greater_or_equal(function__, "delta_data_index",
        delta_data_index, 0);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("x_beta_col_index",
        "n_study_x_beta", n_study_x_beta);
      current_statement__ = 168;
      context__.validate_dims("data initialization", "x_beta_col_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_study_x_beta)});
      x_beta_col_index = std::vector<int>(n_study_x_beta,
                           std::numeric_limits<int>::min());
      current_statement__ = 168;
      x_beta_col_index = context__.vals_i("x_beta_col_index");
      current_statement__ = 168;
      stan::math::check_greater_or_equal(function__, "x_beta_col_index",
        x_beta_col_index, 0);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("x_beta_row_index",
        "n_study_x_beta", n_study_x_beta);
      current_statement__ = 170;
      context__.validate_dims("data initialization", "x_beta_row_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_study_x_beta)});
      x_beta_row_index = std::vector<int>(n_study_x_beta,
                           std::numeric_limits<int>::min());
      current_statement__ = 170;
      x_beta_row_index = context__.vals_i("x_beta_row_index");
      current_statement__ = 170;
      stan::math::check_greater_or_equal(function__, "x_beta_row_index",
        x_beta_row_index, 0);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("x_beta_col_n",
        "n_study_x_beta", n_study_x_beta);
      current_statement__ = 172;
      context__.validate_dims("data initialization", "x_beta_col_n", "int",
        std::vector<size_t>{static_cast<size_t>(n_study_x_beta)});
      x_beta_col_n = std::vector<int>(n_study_x_beta,
                       std::numeric_limits<int>::min());
      current_statement__ = 172;
      x_beta_col_n = context__.vals_i("x_beta_col_n");
      current_statement__ = 172;
      stan::math::check_greater_or_equal(function__, "x_beta_col_n",
        x_beta_col_n, 0);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("x_beta_row_n",
        "n_study_x_beta", n_study_x_beta);
      current_statement__ = 174;
      context__.validate_dims("data initialization", "x_beta_row_n", "int",
        std::vector<size_t>{static_cast<size_t>(n_study_x_beta)});
      x_beta_row_n = std::vector<int>(n_study_x_beta,
                       std::numeric_limits<int>::min());
      current_statement__ = 174;
      x_beta_row_n = context__.vals_i("x_beta_row_n");
      current_statement__ = 174;
      stan::math::check_greater_or_equal(function__, "x_beta_row_n",
        x_beta_row_n, 0);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("study_patient", "n_patient",
        n_patient);
      current_statement__ = 176;
      context__.validate_dims("data initialization", "study_patient", "int",
        std::vector<size_t>{static_cast<size_t>(n_patient)});
      study_patient = std::vector<int>(n_patient,
                        std::numeric_limits<int>::min());
      current_statement__ = 176;
      study_patient = context__.vals_i("study_patient");
      current_statement__ = 176;
      stan::math::check_greater_or_equal(function__, "study_patient",
        study_patient, 0);
      current_statement__ = 176;
      stan::math::check_less_or_equal(function__, "study_patient",
        study_patient, n_patient);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("y", "n_observe", n_observe);
      current_statement__ = 178;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n_observe)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n_observe,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(),
        n_observe);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 178;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 178;
        pos__ = 1;
        current_statement__ = 178;
        for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
          current_statement__ = 178;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 178;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 179;
      stan::math::validate_non_negative_index("x_alpha", "n_observe",
        n_observe);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("x_alpha", "n_alpha", n_alpha);
      current_statement__ = 181;
      context__.validate_dims("data initialization", "x_alpha", "double",
        std::vector<size_t>{static_cast<size_t>(n_observe),
          static_cast<size_t>(n_alpha)});
      x_alpha_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_observe,
                         n_alpha, std::numeric_limits<double>::quiet_NaN());
      new (&x_alpha)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_alpha_data__.data(),
        n_observe, n_alpha);
      {
        std::vector<local_scalar_t__> x_alpha_flat__;
        current_statement__ = 181;
        x_alpha_flat__ = context__.vals_r("x_alpha");
        current_statement__ = 181;
        pos__ = 1;
        current_statement__ = 181;
        for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
          current_statement__ = 181;
          for (int sym2__ = 1; sym2__ <= n_observe; ++sym2__) {
            current_statement__ = 181;
            stan::model::assign(x_alpha, x_alpha_flat__[(pos__ - 1)],
              "assigning variable x_alpha", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 181;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 182;
      stan::math::validate_non_negative_index("x_delta", "n_observe",
        n_observe);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("x_delta", "n_delta", n_delta);
      current_statement__ = 184;
      context__.validate_dims("data initialization", "x_delta", "double",
        std::vector<size_t>{static_cast<size_t>(n_observe),
          static_cast<size_t>(n_delta)});
      x_delta_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_observe,
                         n_delta, std::numeric_limits<double>::quiet_NaN());
      new (&x_delta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_delta_data__.data(),
        n_observe, n_delta);
      {
        std::vector<local_scalar_t__> x_delta_flat__;
        current_statement__ = 184;
        x_delta_flat__ = context__.vals_r("x_delta");
        current_statement__ = 184;
        pos__ = 1;
        current_statement__ = 184;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 184;
          for (int sym2__ = 1; sym2__ <= n_observe; ++sym2__) {
            current_statement__ = 184;
            stan::model::assign(x_delta, x_delta_flat__[(pos__ - 1)],
              "assigning variable x_delta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 184;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 185;
      stan::math::validate_non_negative_index("x_beta", "n_beta", n_beta);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("x_beta", "n_patient",
        n_patient);
      current_statement__ = 187;
      context__.validate_dims("data initialization", "x_beta", "double",
        std::vector<size_t>{static_cast<size_t>(n_beta),
          static_cast<size_t>(n_patient)});
      x_beta_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_beta,
                        n_patient, std::numeric_limits<double>::quiet_NaN());
      new (&x_beta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_beta_data__.data(), n_beta,
        n_patient);
      {
        std::vector<local_scalar_t__> x_beta_flat__;
        current_statement__ = 187;
        x_beta_flat__ = context__.vals_r("x_beta");
        current_statement__ = 187;
        pos__ = 1;
        current_statement__ = 187;
        for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
          current_statement__ = 187;
          for (int sym2__ = 1; sym2__ <= n_beta; ++sym2__) {
            current_statement__ = 187;
            stan::model::assign(x_beta, x_beta_flat__[(pos__ - 1)],
              "assigning variable x_beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 187;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 188;
      context__.validate_dims("data initialization", "covariance_current",
        "int", std::vector<size_t>{});
      covariance_current = std::numeric_limits<int>::min();
      current_statement__ = 188;
      covariance_current = context__.vals_i("covariance_current")[(1 - 1)];
      current_statement__ = 188;
      stan::math::check_greater_or_equal(function__, "covariance_current",
        covariance_current, 1);
      current_statement__ = 188;
      stan::math::check_less_or_equal(function__, "covariance_current",
        covariance_current, 3);
      current_statement__ = 189;
      context__.validate_dims("data initialization", "covariance_historical",
        "int", std::vector<size_t>{});
      covariance_historical = std::numeric_limits<int>::min();
      current_statement__ = 189;
      covariance_historical = context__.vals_i("covariance_historical")[(1 -
        1)];
      current_statement__ = 189;
      stan::math::check_greater_or_equal(function__, "covariance_historical",
        covariance_historical, 1);
      current_statement__ = 189;
      stan::math::check_less_or_equal(function__, "covariance_historical",
        covariance_historical, 3);
      current_statement__ = 190;
      context__.validate_dims("data initialization",
        "covariance_unstructured", "int", std::vector<size_t>{});
      covariance_unstructured = std::numeric_limits<int>::min();
      current_statement__ = 190;
      covariance_unstructured = context__.vals_i("covariance_unstructured")[(1
        - 1)];
      current_statement__ = 191;
      context__.validate_dims("data initialization", "covariance_ar1", "int",
        std::vector<size_t>{});
      covariance_ar1 = std::numeric_limits<int>::min();
      current_statement__ = 191;
      covariance_ar1 = context__.vals_i("covariance_ar1")[(1 - 1)];
      current_statement__ = 192;
      context__.validate_dims("data initialization", "covariance_diagonal",
        "int", std::vector<size_t>{});
      covariance_diagonal = std::numeric_limits<int>::min();
      current_statement__ = 192;
      covariance_diagonal = context__.vals_i("covariance_diagonal")[(1 - 1)];
      current_statement__ = 193;
      stan::math::validate_non_negative_index("y_missing", "n_missing",
        n_missing);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("alpha_raw", "n_alpha", n_alpha);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("mu", "n_mu", n_mu);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("tau", "n_tau", n_tau);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("delta", "n_delta", n_delta);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("beta", "n_beta", n_beta);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("sigma", "n_study", n_study);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("sigma", "n_rep", n_rep);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("lambda_current",
        "n_lambda_current", n_lambda_current);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("lambda_current", "n_rep",
        n_rep);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("lambda_current", "n_rep",
        n_rep);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("lambda_historical",
        "n_lambda_historical", n_lambda_historical);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("lambda_historical", "n_rep",
        n_rep);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("lambda_historical", "n_rep",
        n_rep);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("rho_current", "n_rho_current",
        n_rho_current);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("rho_historical",
        "n_rho_historical", n_rho_historical);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("alpha", "n_alpha", n_alpha);
      current_statement__ = 208;
      stan::math::validate_non_negative_index("epsilon", "n_rep", n_rep);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("epsilon", "n_patient",
        n_patient);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("covariance_cholesky",
        "n_study", n_study);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("covariance_cholesky", "n_rep",
        n_rep);
      current_statement__ = 212;
      stan::math::validate_non_negative_index("covariance_cholesky", "n_rep",
        n_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_missing + n_alpha + n_mu + n_tau + n_delta + n_beta +
      (n_study * n_rep) + (n_lambda_current * ((n_rep * (n_rep - 1)) / 2)) +
      (n_lambda_historical * ((n_rep * (n_rep - 1)) / 2)) + n_rho_current +
      n_rho_historical;
  }
  inline std::string model_name() const final {
    return "model_historicalborrowlong";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_historicalborrowlong_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> y_missing =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_missing,
          DUMMY_VAR__);
      current_statement__ = 1;
      y_missing = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(n_missing);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_alpha, DUMMY_VAR__);
      current_statement__ = 2;
      alpha_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(n_alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_mu, DUMMY_VAR__);
      current_statement__ = 3;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_tau, DUMMY_VAR__);
      current_statement__ = 4;
      tau = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, s_tau,
              lp__, n_tau);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 5;
      delta = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_beta, DUMMY_VAR__);
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_beta);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> sigma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_study,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rep, DUMMY_VAR__));
      current_statement__ = 7;
      sigma = in__.template read_constrain_lub<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, s_sigma, lp__, n_study, n_rep);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_current =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_current,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      current_statement__ = 8;
      lambda_current = in__.template read_constrain_cholesky_factor_corr<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                         jacobian__>(lp__, n_lambda_current, n_rep);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_historical =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_historical,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      current_statement__ = 9;
      lambda_historical = in__.template read_constrain_cholesky_factor_corr<
                            std::vector<
                              Eigen::Matrix<local_scalar_t__,-1,-1>>,
                            jacobian__>(lp__, n_lambda_historical, n_rep);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_current =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_current,
          DUMMY_VAR__);
      current_statement__ = 10;
      rho_current = in__.template read_constrain_lub<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1,
                      1, lp__, n_rho_current);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_historical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_historical,
          DUMMY_VAR__);
      current_statement__ = 11;
      rho_historical = in__.template read_constrain_lub<
                         Eigen::Matrix<local_scalar_t__,-1,1>,
                         jacobian__>(-1, 1, lp__, n_rho_historical);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_alpha, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_patient,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>
        covariance_cholesky =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_study,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      {
        int index = std::numeric_limits<int>::min();
        int last_visit = std::numeric_limits<int>::min();
        int first_visit = std::numeric_limits<int>::min();
        int col_i = std::numeric_limits<int>::min();
        int row_i = std::numeric_limits<int>::min();
        int col_n = std::numeric_limits<int>::min();
        int row_n = std::numeric_limits<int>::min();
        current_statement__ = 22;
        stan::math::validate_non_negative_index("alpha_latent",
          "n_alpha + 1", (n_alpha + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> alpha_latent =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n_alpha + 1),
            DUMMY_VAR__);
        current_statement__ = 24;
        stan::math::validate_non_negative_index("delta_latent",
          "n_delta + 1", (n_delta + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> delta_latent =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n_delta + 1),
            DUMMY_VAR__);
        current_statement__ = 26;
        stan::math::validate_non_negative_index("x_beta_vector", "n_patient",
          n_patient);
        Eigen::Matrix<local_scalar_t__,-1,1> x_beta_vector =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_patient,
            DUMMY_VAR__);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("means", "n_observe",
          n_observe);
        Eigen::Matrix<local_scalar_t__,-1,1> means =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_observe,
            DUMMY_VAR__);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("means_matrix", "n_rep",
          n_rep);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("means_matrix", "n_patient",
          n_patient);
        Eigen::Matrix<local_scalar_t__,-1,-1> means_matrix =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_patient,
            DUMMY_VAR__);
        current_statement__ = 33;
        stan::math::validate_non_negative_index("y_imputed", "n_observe",
          n_observe);
        Eigen::Matrix<local_scalar_t__,-1,1> y_imputed =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_observe,
            DUMMY_VAR__);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("y_matrix", "n_rep", n_rep);
        current_statement__ = 36;
        stan::math::validate_non_negative_index("y_matrix", "n_patient",
          n_patient);
        Eigen::Matrix<local_scalar_t__,-1,-1> y_matrix =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_patient,
            DUMMY_VAR__);
        current_statement__ = 42;
        if (stan::math::logical_eq(model_type, 3)) {
          current_statement__ = 40;
          stan::model::assign(alpha,
            stan::math::add(
              stan::model::rvalue(mu, "mu",
                stan::model::index_multi(alpha_rep_index)),
              stan::math::elt_multiply(
                stan::model::rvalue(tau, "tau",
                  stan::model::index_multi(alpha_rep_index)), alpha_raw)),
            "assigning variable alpha");
        } else {
          current_statement__ = 38;
          stan::model::assign(alpha, alpha_raw, "assigning variable alpha");
        }
        current_statement__ = 43;
        stan::model::assign(alpha_latent, 0,
          "assigning variable alpha_latent", stan::model::index_uni(1));
        current_statement__ = 44;
        stan::model::assign(alpha_latent, alpha,
          "assigning variable alpha_latent",
          stan::model::index_min_max(2, (n_alpha + 1)));
        current_statement__ = 45;
        stan::model::assign(delta_latent, 0,
          "assigning variable delta_latent", stan::model::index_uni(1));
        current_statement__ = 46;
        stan::model::assign(delta_latent, delta,
          "assigning variable delta_latent",
          stan::model::index_min_max(2, (n_delta + 1)));
        current_statement__ = 47;
        stan::model::assign(x_beta_vector,
          stan::math::rep_vector(0, n_patient),
          "assigning variable x_beta_vector");
        current_statement__ = 56;
        if (stan::math::logical_gt(n_beta, 0)) {
          current_statement__ = 54;
          for (int i = 1; i <= n_study_x_beta; ++i) {
            current_statement__ = 48;
            col_i = stan::model::rvalue(x_beta_col_index, "x_beta_col_index",
                      stan::model::index_uni(i));
            current_statement__ = 49;
            row_i = stan::model::rvalue(x_beta_row_index, "x_beta_row_index",
                      stan::model::index_uni(i));
            current_statement__ = 50;
            col_n = stan::model::rvalue(x_beta_col_n, "x_beta_col_n",
                      stan::model::index_uni(i));
            current_statement__ = 51;
            row_n = stan::model::rvalue(x_beta_row_n, "x_beta_row_n",
                      stan::model::index_uni(i));
            current_statement__ = 52;
            stan::model::assign(x_beta_vector,
              stan::math::transpose(
                stan::math::multiply(
                  stan::math::transpose(
                    stan::model::rvalue(beta, "beta",
                      stan::model::index_min_max(row_i, ((row_i + row_n) - 1)))),
                  stan::math::block(x_beta, row_i, col_i, row_n, col_n))),
              "assigning variable x_beta_vector",
              stan::model::index_min_max(col_i, ((col_i + col_n) - 1)));
          }
        }
        current_statement__ = 61;
        if (stan::math::logical_gt(n_beta, 0)) {
          current_statement__ = 59;
          stan::model::assign(means,
            stan::math::add(
              stan::math::add(
                stan::model::rvalue(alpha_latent, "alpha_latent",
                  stan::model::index_multi(alpha_data_index)),
                stan::model::rvalue(delta_latent, "delta_latent",
                  stan::model::index_multi(delta_data_index))),
              stan::model::rvalue(x_beta_vector, "x_beta_vector",
                stan::model::index_multi(index_patient))),
            "assigning variable means");
        } else {
          current_statement__ = 57;
          stan::model::assign(means,
            stan::math::add(
              stan::model::rvalue(alpha_latent, "alpha_latent",
                stan::model::index_multi(alpha_data_index)),
              stan::model::rvalue(delta_latent, "delta_latent",
                stan::model::index_multi(delta_data_index))),
            "assigning variable means");
        }
        current_statement__ = 69;
        if (stan::math::logical_eq(covariance_current,
              covariance_unstructured)) {
          current_statement__ = 67;
          stan::model::assign(covariance_cholesky,
            stan::math::diag_pre_multiply(
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(n_study)),
              stan::model::rvalue(lambda_current, "lambda_current",
                stan::model::index_uni(1))),
            "assigning variable covariance_cholesky",
            stan::model::index_uni(n_study));
        } else {
          current_statement__ = 66;
          if (stan::math::logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 64;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_pre_multiply(
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(n_study)),
                ar1_cholesky(
                  stan::model::rvalue(rho_current, "rho_current",
                    stan::model::index_uni(1)), n_rep, pstream__)),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(n_study));
          } else {
            current_statement__ = 62;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_matrix(
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(n_study))),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(n_study));
          }
        }
        current_statement__ = 79;
        for (int i = 1; i <= (n_study - 1); ++i) {
          current_statement__ = 77;
          if (stan::math::logical_eq(covariance_historical,
                covariance_unstructured)) {
            current_statement__ = 75;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_pre_multiply(
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
                stan::model::rvalue(lambda_historical, "lambda_historical",
                  stan::model::index_uni(i))),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(i));
          } else {
            current_statement__ = 74;
            if (stan::math::logical_eq(covariance_historical, covariance_ar1)) {
              current_statement__ = 72;
              stan::model::assign(covariance_cholesky,
                stan::math::diag_pre_multiply(
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i)),
                  ar1_cholesky(
                    stan::model::rvalue(rho_historical, "rho_historical",
                      stan::model::index_uni(i)), n_rep, pstream__)),
                "assigning variable covariance_cholesky",
                stan::model::index_uni(i));
            } else {
              current_statement__ = 70;
              stan::model::assign(covariance_cholesky,
                stan::math::diag_matrix(
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i))),
                "assigning variable covariance_cholesky",
                stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 82;
        for (int observation = 1; observation <= n_observe; ++observation) {
          current_statement__ = 80;
          stan::model::assign(y_imputed,
            (stan::math::logical_eq(
               stan::model::rvalue(missing, "missing",
                 stan::model::index_uni(observation)), 1) ? stan::model::rvalue(
                                                              y_missing,
                                                              "y_missing",
                                                              stan::model::index_uni(
                                                                stan::model::rvalue(
                                                                  count_missing,
                                                                  "count_missing",
                                                                  stan::model::index_uni(
                                                                    observation)))) : 
            stan::model::rvalue(y, "y", stan::model::index_uni(observation))),
            "assigning variable y_imputed",
            stan::model::index_uni(observation));
        }
        current_statement__ = 83;
        index = 1;
        current_statement__ = 88;
        for (int patient = 1; patient <= n_patient; ++patient) {
          current_statement__ = 84;
          stan::model::assign(y_matrix,
            stan::math::segment(y_imputed, index, n_rep),
            "assigning variable y_matrix", stan::model::index_omni(),
            stan::model::index_uni(patient));
          current_statement__ = 85;
          stan::model::assign(means_matrix,
            stan::math::segment(means, index, n_rep),
            "assigning variable means_matrix", stan::model::index_omni(),
            stan::model::index_uni(patient));
          current_statement__ = 86;
          index = (index + n_rep);
        }
        current_statement__ = 89;
        stan::model::assign(epsilon,
          stan::math::subtract(y_matrix, means_matrix),
          "assigning variable epsilon");
      }
      {
        int start = std::numeric_limits<int>::min();
        int end = std::numeric_limits<int>::min();
        int length = std::numeric_limits<int>::min();
        current_statement__ = 99;
        for (int study = 1; study <= n_study; ++study) {
          current_statement__ = 94;
          start = stan::model::rvalue(index_patient_study,
                    "index_patient_study", stan::model::index_uni(study));
          current_statement__ = 95;
          length = stan::model::rvalue(n_patient_study, "n_patient_study",
                     stan::model::index_uni(study));
          current_statement__ = 96;
          end = ((start + length) - 1);
          current_statement__ = 97;
          lp_accum__.add(stan::math::sum(
                           log_normal_kernel(
                             stan::model::rvalue(covariance_cholesky,
                               "covariance_cholesky",
                               stan::model::index_uni(study)),
                             stan::model::rvalue(epsilon, "epsilon",
                               stan::model::index_omni(),
                               stan::model::index_min_max(start, end)),
                             pstream__)));
        }
        current_statement__ = 106;
        if (stan::math::logical_eq(model_type, 3)) {
          current_statement__ = 102;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(alpha_raw));
          current_statement__ = 103;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, s_mu));
          current_statement__ = 104;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(tau, 0, s_tau));
        } else {
          current_statement__ = 100;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_raw, 0,
                           s_alpha));
        }
        current_statement__ = 107;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta, 0, s_delta));
        current_statement__ = 108;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, s_beta));
        current_statement__ = 111;
        for (int i = 1; i <= n_study; ++i) {
          current_statement__ = 109;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(i)), 0, s_sigma));
        }
        current_statement__ = 117;
        if (stan::math::logical_eq(covariance_current,
              covariance_unstructured)) {
          current_statement__ = 115;
          lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                           stan::model::rvalue(lambda_current,
                             "lambda_current", stan::model::index_uni(1)),
                           s_lambda));
        } else {
          current_statement__ = 114;
          if (stan::math::logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 112;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(rho_current,
                             -1, 1));
          }
        }
        current_statement__ = 125;
        if (stan::math::logical_eq(covariance_historical,
              covariance_unstructured)) {
          current_statement__ = 123;
          for (int i = 1; i <= n_lambda_historical; ++i) {
            current_statement__ = 121;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(lambda_historical,
                               "lambda_historical", stan::model::index_uni(i)),
                             s_lambda));
          }
        } else {
          current_statement__ = 120;
          if (stan::math::logical_eq(covariance_historical, covariance_ar1)) {
            current_statement__ = 118;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(rho_historical,
                             -1, 1));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_historicalborrowlong_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> y_missing =
        Eigen::Matrix<double,-1,1>::Constant(n_missing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      y_missing = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(n_missing);
      Eigen::Matrix<double,-1,1> alpha_raw =
        Eigen::Matrix<double,-1,1>::Constant(n_alpha,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha_raw = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(n_alpha);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n_mu,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_mu);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(n_tau,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      tau = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, s_tau,
              lp__, n_tau);
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(n_delta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      delta = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(n_beta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_beta);
      std::vector<Eigen::Matrix<double,-1,1>> sigma =
        std::vector<Eigen::Matrix<double,-1,1>>(n_study,
          Eigen::Matrix<double,-1,1>::Constant(n_rep,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      sigma = in__.template read_constrain_lub<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                jacobian__>(0, s_sigma, lp__, n_study, n_rep);
      std::vector<Eigen::Matrix<double,-1,-1>> lambda_current =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_lambda_current,
          Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_rep,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      lambda_current = in__.template read_constrain_cholesky_factor_corr<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                         jacobian__>(lp__, n_lambda_current, n_rep);
      std::vector<Eigen::Matrix<double,-1,-1>> lambda_historical =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_lambda_historical,
          Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_rep,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 9;
      lambda_historical = in__.template read_constrain_cholesky_factor_corr<
                            std::vector<
                              Eigen::Matrix<local_scalar_t__,-1,-1>>,
                            jacobian__>(lp__, n_lambda_historical, n_rep);
      Eigen::Matrix<double,-1,1> rho_current =
        Eigen::Matrix<double,-1,1>::Constant(n_rho_current,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      rho_current = in__.template read_constrain_lub<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1,
                      1, lp__, n_rho_current);
      Eigen::Matrix<double,-1,1> rho_historical =
        Eigen::Matrix<double,-1,1>::Constant(n_rho_historical,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      rho_historical = in__.template read_constrain_lub<
                         Eigen::Matrix<local_scalar_t__,-1,1>,
                         jacobian__>(-1, 1, lp__, n_rho_historical);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(n_alpha,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> epsilon =
        Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_patient,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,-1>> covariance_cholesky =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_study,
          Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_rep,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(y_missing);
      out__.write(alpha_raw);
      out__.write(mu);
      out__.write(tau);
      out__.write(delta);
      out__.write(beta);
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
          out__.write(sigma[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
            out__.write(stan::model::rvalue(lambda_current, "lambda_current",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
            out__.write(stan::model::rvalue(lambda_historical,
                          "lambda_historical",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(rho_current);
      out__.write(rho_historical);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        int index = std::numeric_limits<int>::min();
        int last_visit = std::numeric_limits<int>::min();
        int first_visit = std::numeric_limits<int>::min();
        int col_i = std::numeric_limits<int>::min();
        int row_i = std::numeric_limits<int>::min();
        int col_n = std::numeric_limits<int>::min();
        int row_n = std::numeric_limits<int>::min();
        current_statement__ = 22;
        stan::math::validate_non_negative_index("alpha_latent",
          "n_alpha + 1", (n_alpha + 1));
        Eigen::Matrix<double,-1,1> alpha_latent =
          Eigen::Matrix<double,-1,1>::Constant((n_alpha + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 24;
        stan::math::validate_non_negative_index("delta_latent",
          "n_delta + 1", (n_delta + 1));
        Eigen::Matrix<double,-1,1> delta_latent =
          Eigen::Matrix<double,-1,1>::Constant((n_delta + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 26;
        stan::math::validate_non_negative_index("x_beta_vector", "n_patient",
          n_patient);
        Eigen::Matrix<double,-1,1> x_beta_vector =
          Eigen::Matrix<double,-1,1>::Constant(n_patient,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 28;
        stan::math::validate_non_negative_index("means", "n_observe",
          n_observe);
        Eigen::Matrix<double,-1,1> means =
          Eigen::Matrix<double,-1,1>::Constant(n_observe,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::math::validate_non_negative_index("means_matrix", "n_rep",
          n_rep);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("means_matrix", "n_patient",
          n_patient);
        Eigen::Matrix<double,-1,-1> means_matrix =
          Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_patient,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 33;
        stan::math::validate_non_negative_index("y_imputed", "n_observe",
          n_observe);
        Eigen::Matrix<double,-1,1> y_imputed =
          Eigen::Matrix<double,-1,1>::Constant(n_observe,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 35;
        stan::math::validate_non_negative_index("y_matrix", "n_rep", n_rep);
        current_statement__ = 36;
        stan::math::validate_non_negative_index("y_matrix", "n_patient",
          n_patient);
        Eigen::Matrix<double,-1,-1> y_matrix =
          Eigen::Matrix<double,-1,-1>::Constant(n_rep, n_patient,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 42;
        if (stan::math::logical_eq(model_type, 3)) {
          current_statement__ = 40;
          stan::model::assign(alpha,
            stan::math::add(
              stan::model::rvalue(mu, "mu",
                stan::model::index_multi(alpha_rep_index)),
              stan::math::elt_multiply(
                stan::model::rvalue(tau, "tau",
                  stan::model::index_multi(alpha_rep_index)), alpha_raw)),
            "assigning variable alpha");
        } else {
          current_statement__ = 38;
          stan::model::assign(alpha, alpha_raw, "assigning variable alpha");
        }
        current_statement__ = 43;
        stan::model::assign(alpha_latent, 0,
          "assigning variable alpha_latent", stan::model::index_uni(1));
        current_statement__ = 44;
        stan::model::assign(alpha_latent, alpha,
          "assigning variable alpha_latent",
          stan::model::index_min_max(2, (n_alpha + 1)));
        current_statement__ = 45;
        stan::model::assign(delta_latent, 0,
          "assigning variable delta_latent", stan::model::index_uni(1));
        current_statement__ = 46;
        stan::model::assign(delta_latent, delta,
          "assigning variable delta_latent",
          stan::model::index_min_max(2, (n_delta + 1)));
        current_statement__ = 47;
        stan::model::assign(x_beta_vector,
          stan::math::rep_vector(0, n_patient),
          "assigning variable x_beta_vector");
        current_statement__ = 56;
        if (stan::math::logical_gt(n_beta, 0)) {
          current_statement__ = 54;
          for (int i = 1; i <= n_study_x_beta; ++i) {
            current_statement__ = 48;
            col_i = stan::model::rvalue(x_beta_col_index, "x_beta_col_index",
                      stan::model::index_uni(i));
            current_statement__ = 49;
            row_i = stan::model::rvalue(x_beta_row_index, "x_beta_row_index",
                      stan::model::index_uni(i));
            current_statement__ = 50;
            col_n = stan::model::rvalue(x_beta_col_n, "x_beta_col_n",
                      stan::model::index_uni(i));
            current_statement__ = 51;
            row_n = stan::model::rvalue(x_beta_row_n, "x_beta_row_n",
                      stan::model::index_uni(i));
            current_statement__ = 52;
            stan::model::assign(x_beta_vector,
              stan::math::transpose(
                stan::math::multiply(
                  stan::math::transpose(
                    stan::model::rvalue(beta, "beta",
                      stan::model::index_min_max(row_i, ((row_i + row_n) - 1)))),
                  stan::math::block(x_beta, row_i, col_i, row_n, col_n))),
              "assigning variable x_beta_vector",
              stan::model::index_min_max(col_i, ((col_i + col_n) - 1)));
          }
        }
        current_statement__ = 61;
        if (stan::math::logical_gt(n_beta, 0)) {
          current_statement__ = 59;
          stan::model::assign(means,
            stan::math::add(
              stan::math::add(
                stan::model::rvalue(alpha_latent, "alpha_latent",
                  stan::model::index_multi(alpha_data_index)),
                stan::model::rvalue(delta_latent, "delta_latent",
                  stan::model::index_multi(delta_data_index))),
              stan::model::rvalue(x_beta_vector, "x_beta_vector",
                stan::model::index_multi(index_patient))),
            "assigning variable means");
        } else {
          current_statement__ = 57;
          stan::model::assign(means,
            stan::math::add(
              stan::model::rvalue(alpha_latent, "alpha_latent",
                stan::model::index_multi(alpha_data_index)),
              stan::model::rvalue(delta_latent, "delta_latent",
                stan::model::index_multi(delta_data_index))),
            "assigning variable means");
        }
        current_statement__ = 69;
        if (stan::math::logical_eq(covariance_current,
              covariance_unstructured)) {
          current_statement__ = 67;
          stan::model::assign(covariance_cholesky,
            stan::math::diag_pre_multiply(
              stan::model::rvalue(sigma, "sigma",
                stan::model::index_uni(n_study)),
              stan::model::rvalue(lambda_current, "lambda_current",
                stan::model::index_uni(1))),
            "assigning variable covariance_cholesky",
            stan::model::index_uni(n_study));
        } else {
          current_statement__ = 66;
          if (stan::math::logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 64;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_pre_multiply(
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(n_study)),
                ar1_cholesky(
                  stan::model::rvalue(rho_current, "rho_current",
                    stan::model::index_uni(1)), n_rep, pstream__)),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(n_study));
          } else {
            current_statement__ = 62;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_matrix(
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(n_study))),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(n_study));
          }
        }
        current_statement__ = 79;
        for (int i = 1; i <= (n_study - 1); ++i) {
          current_statement__ = 77;
          if (stan::math::logical_eq(covariance_historical,
                covariance_unstructured)) {
            current_statement__ = 75;
            stan::model::assign(covariance_cholesky,
              stan::math::diag_pre_multiply(
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
                stan::model::rvalue(lambda_historical, "lambda_historical",
                  stan::model::index_uni(i))),
              "assigning variable covariance_cholesky",
              stan::model::index_uni(i));
          } else {
            current_statement__ = 74;
            if (stan::math::logical_eq(covariance_historical, covariance_ar1)) {
              current_statement__ = 72;
              stan::model::assign(covariance_cholesky,
                stan::math::diag_pre_multiply(
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i)),
                  ar1_cholesky(
                    stan::model::rvalue(rho_historical, "rho_historical",
                      stan::model::index_uni(i)), n_rep, pstream__)),
                "assigning variable covariance_cholesky",
                stan::model::index_uni(i));
            } else {
              current_statement__ = 70;
              stan::model::assign(covariance_cholesky,
                stan::math::diag_matrix(
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i))),
                "assigning variable covariance_cholesky",
                stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 82;
        for (int observation = 1; observation <= n_observe; ++observation) {
          current_statement__ = 80;
          stan::model::assign(y_imputed,
            (stan::math::logical_eq(
               stan::model::rvalue(missing, "missing",
                 stan::model::index_uni(observation)), 1) ? stan::model::rvalue(
                                                              y_missing,
                                                              "y_missing",
                                                              stan::model::index_uni(
                                                                stan::model::rvalue(
                                                                  count_missing,
                                                                  "count_missing",
                                                                  stan::model::index_uni(
                                                                    observation)))) : 
            stan::model::rvalue(y, "y", stan::model::index_uni(observation))),
            "assigning variable y_imputed",
            stan::model::index_uni(observation));
        }
        current_statement__ = 83;
        index = 1;
        current_statement__ = 88;
        for (int patient = 1; patient <= n_patient; ++patient) {
          current_statement__ = 84;
          stan::model::assign(y_matrix,
            stan::math::segment(y_imputed, index, n_rep),
            "assigning variable y_matrix", stan::model::index_omni(),
            stan::model::index_uni(patient));
          current_statement__ = 85;
          stan::model::assign(means_matrix,
            stan::math::segment(means, index, n_rep),
            "assigning variable means_matrix", stan::model::index_omni(),
            stan::model::index_uni(patient));
          current_statement__ = 86;
          index = (index + n_rep);
        }
        current_statement__ = 89;
        stan::model::assign(epsilon,
          stan::math::subtract(y_matrix, means_matrix),
          "assigning variable epsilon");
      }
      if (emit_transformed_parameters__) {
        out__.write(alpha);
        out__.write(epsilon);
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
              out__.write(stan::model::rvalue(covariance_cholesky,
                            "covariance_cholesky",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> y_missing =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_missing,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(y_missing,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_missing),
        "assigning variable y_missing");
      out__.write(y_missing);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_alpha, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_alpha),
        "assigning variable alpha_raw");
      out__.write(alpha_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_mu, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_mu),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_tau, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_tau),
        "assigning variable tau");
      out__.write_free_lub(0, s_tau, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_delta),
        "assigning variable delta");
      out__.write(delta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_beta, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_beta),
        "assigning variable beta");
      out__.write(beta);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> sigma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_study,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rep, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(sigma, in__.read<local_scalar_t__>(),
            "assigning variable sigma", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lub(0, s_sigma, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_current =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_current,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          current_statement__ = 8;
          for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
            current_statement__ = 8;
            stan::model::assign(lambda_current,
              in__.read<local_scalar_t__>(),
              "assigning variable lambda_current",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(lambda_current);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_historical =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_historical,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          current_statement__ = 9;
          for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
            current_statement__ = 9;
            stan::model::assign(lambda_historical,
              in__.read<local_scalar_t__>(),
              "assigning variable lambda_historical",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(lambda_historical);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_current =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_current,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(rho_current,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_rho_current),
        "assigning variable rho_current");
      out__.write_free_lub(-1, 1, rho_current);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_historical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_historical,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(rho_historical,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_rho_historical),
        "assigning variable rho_historical");
      out__.write_free_lub(-1, 1, rho_historical);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "y_missing",
        "double", std::vector<size_t>{static_cast<size_t>(n_missing)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha_raw",
        "double", std::vector<size_t>{static_cast<size_t>(n_alpha)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(n_mu)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(n_tau)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(n_delta)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(n_beta)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(n_study),
          static_cast<size_t>(n_rep)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "lambda_current",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_lambda_current),
          static_cast<size_t>(n_rep), static_cast<size_t>(n_rep)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "lambda_historical", "double",
        std::vector<size_t>{static_cast<size_t>(n_lambda_historical),
          static_cast<size_t>(n_rep), static_cast<size_t>(n_rep)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "rho_current",
        "double", std::vector<size_t>{static_cast<size_t>(n_rho_current)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "rho_historical",
        "double", std::vector<size_t>{static_cast<size_t>(n_rho_historical)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> y_missing =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_missing,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y_missing_flat__;
        current_statement__ = 1;
        y_missing_flat__ = context__.vals_r("y_missing");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(y_missing, y_missing_flat__[(pos__ - 1)],
            "assigning variable y_missing", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y_missing);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_alpha, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_raw_flat__;
        current_statement__ = 2;
        alpha_raw_flat__ = context__.vals_r("alpha_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alpha_raw, alpha_raw_flat__[(pos__ - 1)],
            "assigning variable alpha_raw", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_mu, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 3;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_tau, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 4;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, s_tau, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_delta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 5;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(delta, delta_flat__[(pos__ - 1)],
            "assigning variable delta", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(delta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_beta, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 6;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> sigma =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_study,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rep, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 7;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
              "assigning variable sigma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lub(0, s_sigma, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_current =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_current,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> lambda_current_flat__;
        current_statement__ = 8;
        lambda_current_flat__ = context__.vals_r("lambda_current");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
              current_statement__ = 8;
              stan::model::assign(lambda_current,
                lambda_current_flat__[(pos__ - 1)],
                "assigning variable lambda_current",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 8;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(lambda_current);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> lambda_historical =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_lambda_historical,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_rep, n_rep,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> lambda_historical_flat__;
        current_statement__ = 9;
        lambda_historical_flat__ = context__.vals_r("lambda_historical");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            current_statement__ = 9;
            for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
              current_statement__ = 9;
              stan::model::assign(lambda_historical,
                lambda_historical_flat__[(pos__ - 1)],
                "assigning variable lambda_historical",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 9;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(lambda_historical);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_current =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_current,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> rho_current_flat__;
        current_statement__ = 10;
        rho_current_flat__ = context__.vals_r("rho_current");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(rho_current, rho_current_flat__[(pos__ - 1)],
            "assigning variable rho_current", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, rho_current);
      Eigen::Matrix<local_scalar_t__,-1,1> rho_historical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rho_historical,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> rho_historical_flat__;
        current_statement__ = 11;
        rho_historical_flat__ = context__.vals_r("rho_historical");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(rho_historical, rho_historical_flat__[(pos__ -
            1)], "assigning variable rho_historical",
            stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, rho_historical);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"y_missing", "alpha_raw", "mu", "tau",
                "delta", "beta", "sigma", "lambda_current",
                "lambda_historical", "rho_current", "rho_historical"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"alpha", "epsilon", "covariance_cholesky"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_missing)},
                std::vector<size_t>{static_cast<size_t>(n_alpha)},
                std::vector<size_t>{static_cast<size_t>(n_mu)},
                std::vector<size_t>{static_cast<size_t>(n_tau)},
                std::vector<size_t>{static_cast<size_t>(n_delta)},
                std::vector<size_t>{static_cast<size_t>(n_beta)},
                std::vector<size_t>{static_cast<size_t>(n_study),
                  static_cast<size_t>(n_rep)},
                std::vector<size_t>{static_cast<size_t>(n_lambda_current),
                  static_cast<size_t>(n_rep), static_cast<size_t>(n_rep)},
                std::vector<size_t>{static_cast<size_t>(n_lambda_historical),
                  static_cast<size_t>(n_rep), static_cast<size_t>(n_rep)},
                std::vector<size_t>{static_cast<size_t>(n_rho_current)},
                std::vector<size_t>{static_cast<size_t>(n_rho_historical)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_alpha)},
             std::vector<size_t>{static_cast<size_t>(n_rep),
               static_cast<size_t>(n_patient)},
             std::vector<size_t>{static_cast<size_t>(n_study),
               static_cast<size_t>(n_rep), static_cast<size_t>(n_rep)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_missing" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
          param_names__.emplace_back(std::string() + "lambda_current" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
          param_names__.emplace_back(std::string() + "lambda_historical" +
            '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.'
            + std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_current" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_historical" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          param_names__.emplace_back(std::string() + "epsilon" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
            param_names__.emplace_back(std::string() + "covariance_cholesky"
              + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) +
              '.' + std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_missing" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((n_rep * (n_rep - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_lambda_current; ++sym2__) {
        param_names__.emplace_back(std::string() + "lambda_current" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((n_rep * (n_rep - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_lambda_historical; ++sym2__) {
        param_names__.emplace_back(std::string() + "lambda_historical" + '.'
          + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_current" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_historical" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          param_names__.emplace_back(std::string() + "epsilon" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
            param_names__.emplace_back(std::string() + "covariance_cholesky"
              + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) +
              '.' + std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_missing) + "},\"block\":\"parameters\"},{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_alpha) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_mu) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_tau) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_beta) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_study) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rep) + "}},\"block\":\"parameters\"},{\"name\":\"lambda_current\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_lambda_current) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_rep) + "}},\"block\":\"parameters\"},{\"name\":\"lambda_historical\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_lambda_historical) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_rep) + "}},\"block\":\"parameters\"},{\"name\":\"rho_current\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rho_current) + "},\"block\":\"parameters\"},{\"name\":\"rho_historical\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rho_historical) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_alpha) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_patient) + "},\"block\":\"transformed_parameters\"},{\"name\":\"covariance_cholesky\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_study) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_rep) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_missing) + "},\"block\":\"parameters\"},{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_alpha) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_mu) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_tau) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_delta) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_beta) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_study) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rep) + "}},\"block\":\"parameters\"},{\"name\":\"lambda_current\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_lambda_current) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((n_rep * (n_rep - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"lambda_historical\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_lambda_historical) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((n_rep * (n_rep - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"rho_current\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rho_current) + "},\"block\":\"parameters\"},{\"name\":\"rho_historical\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rho_historical) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_alpha) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_patient) + "},\"block\":\"transformed_parameters\"},{\"name\":\"covariance_cholesky\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_study) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_rep) + ",\"cols\":" + std::to_string(n_rep) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((n_missing + n_alpha) + n_mu) +
      n_tau) + n_delta) + n_beta) + (n_study * n_rep)) + ((n_lambda_current *
      n_rep) * n_rep)) + ((n_lambda_historical * n_rep) * n_rep)) +
      n_rho_current) + n_rho_historical);
    const size_t num_transformed = emit_transformed_parameters * (((n_alpha +
      (n_rep * n_patient)) + ((n_study * n_rep) * n_rep)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((n_missing + n_alpha) + n_mu) +
      n_tau) + n_delta) + n_beta) + (n_study * n_rep)) + ((n_lambda_current *
      n_rep) * n_rep)) + ((n_lambda_historical * n_rep) * n_rep)) +
      n_rho_current) + n_rho_historical);
    const size_t num_transformed = emit_transformed_parameters * (((n_alpha +
      (n_rep * n_patient)) + ((n_study * n_rep) * n_rep)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_historicalborrowlong_namespace::model_historicalborrowlong;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_historicalborrowlong_namespace::profiles__;
}
#endif
#endif
