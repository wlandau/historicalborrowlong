// Generated by rstantools.  Do not edit by hand.

/*
    historicalborrowlong is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    historicalborrowlong is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with historicalborrowlong.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_historicalborrowlong_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'historicalborrowlong', line 105, column 2 to column 30)",
                                                      " (in 'historicalborrowlong', line 106, column 2 to column 28)",
                                                      " (in 'historicalborrowlong', line 107, column 2 to column 18)",
                                                      " (in 'historicalborrowlong', line 108, column 2 to column 41)",
                                                      " (in 'historicalborrowlong', line 109, column 2 to column 24)",
                                                      " (in 'historicalborrowlong', line 110, column 2 to column 22)",
                                                      " (in 'historicalborrowlong', line 111, column 2 to column 60)",
                                                      " (in 'historicalborrowlong', line 112, column 2 to column 69)",
                                                      " (in 'historicalborrowlong', line 113, column 2 to column 75)",
                                                      " (in 'historicalborrowlong', line 114, column 2 to column 54)",
                                                      " (in 'historicalborrowlong', line 115, column 2 to column 60)",
                                                      " (in 'historicalborrowlong', line 118, column 2 to column 24)",
                                                      " (in 'historicalborrowlong', line 119, column 2 to column 35)",
                                                      " (in 'historicalborrowlong', line 120, column 2 to column 58)",
                                                      " (in 'historicalborrowlong', line 122, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 123, column 4 to column 19)",
                                                      " (in 'historicalborrowlong', line 124, column 4 to column 20)",
                                                      " (in 'historicalborrowlong', line 125, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 126, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 127, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 128, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 129, column 11 to column 22)",
                                                      " (in 'historicalborrowlong', line 129, column 4 to column 37)",
                                                      " (in 'historicalborrowlong', line 130, column 11 to column 22)",
                                                      " (in 'historicalborrowlong', line 130, column 4 to column 37)",
                                                      " (in 'historicalborrowlong', line 131, column 11 to column 20)",
                                                      " (in 'historicalborrowlong', line 131, column 4 to column 36)",
                                                      " (in 'historicalborrowlong', line 132, column 11 to column 20)",
                                                      " (in 'historicalborrowlong', line 132, column 4 to column 28)",
                                                      " (in 'historicalborrowlong', line 133, column 11 to column 16)",
                                                      " (in 'historicalborrowlong', line 133, column 18 to column 27)",
                                                      " (in 'historicalborrowlong', line 133, column 4 to column 42)",
                                                      " (in 'historicalborrowlong', line 134, column 11 to column 20)",
                                                      " (in 'historicalborrowlong', line 134, column 4 to column 32)",
                                                      " (in 'historicalborrowlong', line 135, column 11 to column 16)",
                                                      " (in 'historicalborrowlong', line 135, column 18 to column 27)",
                                                      " (in 'historicalborrowlong', line 135, column 4 to column 38)",
                                                      " (in 'historicalborrowlong', line 141, column 6 to column 24)",
                                                      " (in 'historicalborrowlong', line 140, column 11 to line 142, column 5)",
                                                      " (in 'historicalborrowlong', line 139, column 6 to column 72)",
                                                      " (in 'historicalborrowlong', line 138, column 25 to line 140, column 5)",
                                                      " (in 'historicalborrowlong', line 138, column 4 to line 142, column 5)",
                                                      " (in 'historicalborrowlong', line 143, column 4 to column 24)",
                                                      " (in 'historicalborrowlong', line 144, column 4 to column 42)",
                                                      " (in 'historicalborrowlong', line 145, column 4 to column 24)",
                                                      " (in 'historicalborrowlong', line 146, column 4 to column 42)",
                                                      " (in 'historicalborrowlong', line 149, column 4 to column 45)",
                                                      " (in 'historicalborrowlong', line 152, column 8 to column 36)",
                                                      " (in 'historicalborrowlong', line 153, column 8 to column 36)",
                                                      " (in 'historicalborrowlong', line 154, column 8 to column 32)",
                                                      " (in 'historicalborrowlong', line 155, column 8 to column 32)",
                                                      " (in 'historicalborrowlong', line 156, column 8 to line 159, column 11)",
                                                      " (in 'historicalborrowlong', line 151, column 34 to line 160, column 7)",
                                                      " (in 'historicalborrowlong', line 151, column 6 to line 160, column 7)",
                                                      " (in 'historicalborrowlong', line 150, column 20 to line 161, column 5)",
                                                      " (in 'historicalborrowlong', line 150, column 4 to line 161, column 5)",
                                                      " (in 'historicalborrowlong', line 169, column 6 to column 78)",
                                                      " (in 'historicalborrowlong', line 168, column 11 to line 170, column 5)",
                                                      " (in 'historicalborrowlong', line 165, column 6 to line 167, column 35)",
                                                      " (in 'historicalborrowlong', line 164, column 20 to line 168, column 5)",
                                                      " (in 'historicalborrowlong', line 164, column 4 to line 170, column 5)",
                                                      " (in 'historicalborrowlong', line 184, column 6 to column 65)",
                                                      " (in 'historicalborrowlong', line 183, column 11 to line 185, column 5)",
                                                      " (in 'historicalborrowlong', line 179, column 6 to line 182, column 8)",
                                                      " (in 'historicalborrowlong', line 178, column 53 to line 183, column 5)",
                                                      " (in 'historicalborrowlong', line 178, column 11 to line 185, column 5)",
                                                      " (in 'historicalborrowlong', line 174, column 6 to line 177, column 8)",
                                                      " (in 'historicalborrowlong', line 173, column 55 to line 178, column 5)",
                                                      " (in 'historicalborrowlong', line 173, column 4 to line 185, column 5)",
                                                      " (in 'historicalborrowlong', line 200, column 8 to column 55)",
                                                      " (in 'historicalborrowlong', line 199, column 13 to line 201, column 7)",
                                                      " (in 'historicalborrowlong', line 195, column 8 to line 198, column 10)",
                                                      " (in 'historicalborrowlong', line 194, column 58 to line 199, column 7)",
                                                      " (in 'historicalborrowlong', line 194, column 13 to line 201, column 7)",
                                                      " (in 'historicalborrowlong', line 190, column 8 to line 193, column 10)",
                                                      " (in 'historicalborrowlong', line 189, column 60 to line 194, column 7)",
                                                      " (in 'historicalborrowlong', line 189, column 6 to line 201, column 7)",
                                                      " (in 'historicalborrowlong', line 188, column 31 to line 202, column 5)",
                                                      " (in 'historicalborrowlong', line 188, column 4 to line 202, column 5)",
                                                      " (in 'historicalborrowlong', line 206, column 6 to line 208, column 21)",
                                                      " (in 'historicalborrowlong', line 205, column 37 to line 209, column 5)",
                                                      " (in 'historicalborrowlong', line 205, column 4 to line 209, column 5)",
                                                      " (in 'historicalborrowlong', line 212, column 4 to column 14)",
                                                      " (in 'historicalborrowlong', line 214, column 6 to column 61)",
                                                      " (in 'historicalborrowlong', line 215, column 6 to column 61)",
                                                      " (in 'historicalborrowlong', line 216, column 6 to column 21)",
                                                      " (in 'historicalborrowlong', line 213, column 33 to line 217, column 5)",
                                                      " (in 'historicalborrowlong', line 213, column 4 to line 217, column 5)",
                                                      " (in 'historicalborrowlong', line 218, column 4 to column 38)",
                                                      " (in 'historicalborrowlong', line 121, column 2 to line 219, column 3)",
                                                      " (in 'historicalborrowlong', line 223, column 2 to column 12)",
                                                      " (in 'historicalborrowlong', line 224, column 2 to column 10)",
                                                      " (in 'historicalborrowlong', line 225, column 2 to column 13)",
                                                      " (in 'historicalborrowlong', line 227, column 4 to column 39)",
                                                      " (in 'historicalborrowlong', line 228, column 4 to column 36)",
                                                      " (in 'historicalborrowlong', line 229, column 4 to column 29)",
                                                      " (in 'historicalborrowlong', line 230, column 4 to line 235, column 6)",
                                                      " (in 'historicalborrowlong', line 226, column 27 to line 236, column 3)",
                                                      " (in 'historicalborrowlong', line 226, column 2 to line 236, column 3)",
                                                      " (in 'historicalborrowlong', line 243, column 4 to column 35)",
                                                      " (in 'historicalborrowlong', line 242, column 9 to line 244, column 3)",
                                                      " (in 'historicalborrowlong', line 239, column 4 to column 29)",
                                                      " (in 'historicalborrowlong', line 240, column 4 to column 25)",
                                                      " (in 'historicalborrowlong', line 241, column 4 to column 28)",
                                                      " (in 'historicalborrowlong', line 238, column 23 to line 242, column 3)",
                                                      " (in 'historicalborrowlong', line 238, column 2 to line 244, column 3)",
                                                      " (in 'historicalborrowlong', line 245, column 2 to column 29)",
                                                      " (in 'historicalborrowlong', line 246, column 2 to column 27)",
                                                      " (in 'historicalborrowlong', line 248, column 4 to column 35)",
                                                      " (in 'historicalborrowlong', line 247, column 23 to line 249, column 3)",
                                                      " (in 'historicalborrowlong', line 247, column 2 to line 249, column 3)",
                                                      " (in 'historicalborrowlong', line 253, column 4 to column 33)",
                                                      " (in 'historicalborrowlong', line 252, column 51 to line 254, column 3)",
                                                      " (in 'historicalborrowlong', line 252, column 9 to line 254, column 3)",
                                                      " (in 'historicalborrowlong', line 251, column 4 to column 52)",
                                                      " (in 'historicalborrowlong', line 250, column 53 to line 252, column 3)",
                                                      " (in 'historicalborrowlong', line 250, column 2 to line 254, column 3)",
                                                      " (in 'historicalborrowlong', line 260, column 4 to column 36)",
                                                      " (in 'historicalborrowlong', line 259, column 54 to line 261, column 3)",
                                                      " (in 'historicalborrowlong', line 259, column 9 to line 261, column 3)",
                                                      " (in 'historicalborrowlong', line 257, column 6 to column 57)",
                                                      " (in 'historicalborrowlong', line 256, column 37 to line 258, column 5)",
                                                      " (in 'historicalborrowlong', line 256, column 4 to line 258, column 5)",
                                                      " (in 'historicalborrowlong', line 255, column 56 to line 259, column 3)",
                                                      " (in 'historicalborrowlong', line 255, column 2 to line 261, column 3)",
                                                      " (in 'historicalborrowlong', line 57, column 2 to column 34)",
                                                      " (in 'historicalborrowlong', line 58, column 2 to column 23)",
                                                      " (in 'historicalborrowlong', line 59, column 2 to column 20)",
                                                      " (in 'historicalborrowlong', line 60, column 2 to column 21)",
                                                      " (in 'historicalborrowlong', line 61, column 2 to column 23)",
                                                      " (in 'historicalborrowlong', line 62, column 2 to column 22)",
                                                      " (in 'historicalborrowlong', line 63, column 2 to column 25)",
                                                      " (in 'historicalborrowlong', line 64, column 2 to column 25)",
                                                      " (in 'historicalborrowlong', line 65, column 2 to column 25)",
                                                      " (in 'historicalborrowlong', line 66, column 2 to column 21)",
                                                      " (in 'historicalborrowlong', line 67, column 2 to column 23)",
                                                      " (in 'historicalborrowlong', line 68, column 2 to column 30)",
                                                      " (in 'historicalborrowlong', line 69, column 2 to column 32)",
                                                      " (in 'historicalborrowlong', line 70, column 2 to column 35)",
                                                      " (in 'historicalborrowlong', line 71, column 2 to column 29)",
                                                      " (in 'historicalborrowlong', line 72, column 2 to column 32)",
                                                      " (in 'historicalborrowlong', line 73, column 8 to column 15)",
                                                      " (in 'historicalborrowlong', line 73, column 2 to column 46)",
                                                      " (in 'historicalborrowlong', line 74, column 8 to column 15)",
                                                      " (in 'historicalborrowlong', line 74, column 2 to column 50)",
                                                      " (in 'historicalborrowlong', line 75, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 75, column 2 to column 46)",
                                                      " (in 'historicalborrowlong', line 76, column 2 to column 24)",
                                                      " (in 'historicalborrowlong', line 77, column 2 to column 21)",
                                                      " (in 'historicalborrowlong', line 78, column 2 to column 22)",
                                                      " (in 'historicalborrowlong', line 79, column 2 to column 23)",
                                                      " (in 'historicalborrowlong', line 80, column 2 to column 24)",
                                                      " (in 'historicalborrowlong', line 81, column 2 to column 24)",
                                                      " (in 'historicalborrowlong', line 82, column 2 to column 25)",
                                                      " (in 'historicalborrowlong', line 83, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 83, column 2 to column 40)",
                                                      " (in 'historicalborrowlong', line 84, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 84, column 2 to column 46)",
                                                      " (in 'historicalborrowlong', line 85, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 85, column 2 to column 44)",
                                                      " (in 'historicalborrowlong', line 86, column 8 to column 15)",
                                                      " (in 'historicalborrowlong', line 86, column 2 to column 46)",
                                                      " (in 'historicalborrowlong', line 87, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 87, column 2 to column 49)",
                                                      " (in 'historicalborrowlong', line 88, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 88, column 2 to column 49)",
                                                      " (in 'historicalborrowlong', line 89, column 8 to column 22)",
                                                      " (in 'historicalborrowlong', line 89, column 2 to column 54)",
                                                      " (in 'historicalborrowlong', line 90, column 8 to column 22)",
                                                      " (in 'historicalborrowlong', line 90, column 2 to column 54)",
                                                      " (in 'historicalborrowlong', line 91, column 8 to column 22)",
                                                      " (in 'historicalborrowlong', line 91, column 2 to column 50)",
                                                      " (in 'historicalborrowlong', line 92, column 8 to column 22)",
                                                      " (in 'historicalborrowlong', line 92, column 2 to column 50)",
                                                      " (in 'historicalborrowlong', line 93, column 8 to column 17)",
                                                      " (in 'historicalborrowlong', line 93, column 2 to column 62)",
                                                      " (in 'historicalborrowlong', line 94, column 9 to column 18)",
                                                      " (in 'historicalborrowlong', line 94, column 2 to column 22)",
                                                      " (in 'historicalborrowlong', line 95, column 9 to column 18)",
                                                      " (in 'historicalborrowlong', line 95, column 20 to column 27)",
                                                      " (in 'historicalborrowlong', line 95, column 2 to column 37)",
                                                      " (in 'historicalborrowlong', line 96, column 9 to column 18)",
                                                      " (in 'historicalborrowlong', line 96, column 20 to column 27)",
                                                      " (in 'historicalborrowlong', line 96, column 2 to column 37)",
                                                      " (in 'historicalborrowlong', line 97, column 9 to column 15)",
                                                      " (in 'historicalborrowlong', line 97, column 17 to column 26)",
                                                      " (in 'historicalborrowlong', line 97, column 2 to column 35)",
                                                      " (in 'historicalborrowlong', line 98, column 2 to column 42)",
                                                      " (in 'historicalborrowlong', line 99, column 2 to column 45)",
                                                      " (in 'historicalborrowlong', line 100, column 2 to column 30)",
                                                      " (in 'historicalborrowlong', line 101, column 2 to column 21)",
                                                      " (in 'historicalborrowlong', line 102, column 2 to column 26)",
                                                      " (in 'historicalborrowlong', line 105, column 9 to column 18)",
                                                      " (in 'historicalborrowlong', line 106, column 9 to column 16)",
                                                      " (in 'historicalborrowlong', line 107, column 9 to column 13)",
                                                      " (in 'historicalborrowlong', line 108, column 30 to column 35)",
                                                      " (in 'historicalborrowlong', line 109, column 9 to column 16)",
                                                      " (in 'historicalborrowlong', line 110, column 9 to column 15)",
                                                      " (in 'historicalborrowlong', line 111, column 8 to column 15)",
                                                      " (in 'historicalborrowlong', line 111, column 47 to column 52)",
                                                      " (in 'historicalborrowlong', line 112, column 8 to column 24)",
                                                      " (in 'historicalborrowlong', line 112, column 47 to column 52)",
                                                      " (in 'historicalborrowlong', line 113, column 8 to column 27)",
                                                      " (in 'historicalborrowlong', line 113, column 50 to column 55)",
                                                      " (in 'historicalborrowlong', line 114, column 27 to column 40)",
                                                      " (in 'historicalborrowlong', line 115, column 27 to column 43)",
                                                      " (in 'historicalborrowlong', line 118, column 9 to column 16)",
                                                      " (in 'historicalborrowlong', line 119, column 9 to column 14)",
                                                      " (in 'historicalborrowlong', line 119, column 16 to column 25)",
                                                      " (in 'historicalborrowlong', line 120, column 8 to column 15)",
                                                      " (in 'historicalborrowlong', line 120, column 24 to column 29)",
                                                      " (in 'historicalborrowlong', line 120, column 31 to column 36)",
                                                      " (in 'historicalborrowlong', line 24, column 4 to line 25, column 36)",
                                                      " (in 'historicalborrowlong', line 23, column 64 to line 26, column 3)",
                                                      " (in 'historicalborrowlong', line 42, column 4 to column 39)",
                                                      " (in 'historicalborrowlong', line 43, column 11 to column 12)",
                                                      " (in 'historicalborrowlong', line 43, column 14 to column 15)",
                                                      " (in 'historicalborrowlong', line 43, column 4 to column 43)",
                                                      " (in 'historicalborrowlong', line 44, column 4 to column 20)",
                                                      " (in 'historicalborrowlong', line 46, column 6 to column 32)",
                                                      " (in 'historicalborrowlong', line 45, column 19 to line 47, column 5)",
                                                      " (in 'historicalborrowlong', line 45, column 4 to line 47, column 5)",
                                                      " (in 'historicalborrowlong', line 50, column 8 to column 42)",
                                                      " (in 'historicalborrowlong', line 49, column 21 to line 51, column 7)",
                                                      " (in 'historicalborrowlong', line 49, column 6 to line 51, column 7)",
                                                      " (in 'historicalborrowlong', line 48, column 19 to line 52, column 5)",
                                                      " (in 'historicalborrowlong', line 48, column 4 to line 52, column 5)",
                                                      " (in 'historicalborrowlong', line 53, column 4 to column 15)",
                                                      " (in 'historicalborrowlong', line 41, column 39 to line 54, column 3)"};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
log_normal_kernel(const T0__& cholesky_arg__, const T1__& epsilon_arg__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& cholesky = to_ref(cholesky_arg__);
  const auto& epsilon = to_ref(epsilon_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 213;
    return subtract(
             multiply(-0.5,
               columns_dot_self(mdivide_left_tri_low(cholesky, epsilon))),
             sum(stan::math::log(diagonal(cholesky))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct log_normal_kernel_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
operator()(const T0__& cholesky, const T1__& epsilon, std::ostream* pstream__)  const 
{
return log_normal_kernel(cholesky, epsilon, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
ar1_cholesky(const T0__& rho, const int& n, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ scale;
    scale = DUMMY_VAR__;
    
    current_statement__ = 215;
    scale = stan::math::sqrt((1 - (rho * rho)));
    current_statement__ = 216;
    validate_non_negative_index("out", "n", n);
    current_statement__ = 217;
    validate_non_negative_index("out", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 218;
    assign(out, nil_index_list(), rep_matrix(0, n, n),
      "assigning variable out");
    current_statement__ = 219;
    assign(out,
      cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
      1.0, "assigning variable out");
    current_statement__ = 222;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 220;
      assign(out,
        cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
        pow(rho, (i - 1)), "assigning variable out");}
    current_statement__ = 227;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 225;
      for (int j = 2; j <= i; ++j) {
        current_statement__ = 223;
        assign(out,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          (scale * pow(rho, (i - j))), "assigning variable out");}}
    current_statement__ = 228;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ar1_cholesky_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
operator()(const T0__& rho, const int& n, std::ostream* pstream__)  const 
{
return ar1_cholesky(rho, n, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_historicalborrowlong final : public model_base_crtp<model_historicalborrowlong> {
private:
  int model_type;
  int n_alpha;
  int n_mu;
  int n_tau;
  int n_delta;
  int n_beta;
  int n_observe;
  int n_missing;
  int n_patient;
  int n_rep;
  int n_study;
  int n_study_x_beta;
  int n_lambda_current;
  int n_lambda_historical;
  int n_rho_current;
  int n_rho_historical;
  std::vector<int> n_patient_study;
  std::vector<int> index_patient_study;
  std::vector<int> index_patient;
  double s_alpha;
  double s_mu;
  double s_tau;
  double s_beta;
  double s_delta;
  double s_sigma;
  double s_lambda;
  std::vector<int> missing;
  std::vector<int> count_missing;
  std::vector<int> study_index;
  std::vector<int> alpha_rep_index;
  std::vector<int> alpha_data_index;
  std::vector<int> delta_data_index;
  std::vector<int> x_beta_col_index;
  std::vector<int> x_beta_row_index;
  std::vector<int> x_beta_col_n;
  std::vector<int> x_beta_row_n;
  std::vector<int> study_patient;
  Eigen::Matrix<double, -1, 1> y;
  Eigen::Matrix<double, -1, -1> x_alpha;
  Eigen::Matrix<double, -1, -1> x_delta;
  Eigen::Matrix<double, -1, -1> x_beta;
  int covariance_current;
  int covariance_historical;
  int covariance_unstructured;
  int covariance_ar1;
  int covariance_diagonal;
 
public:
  ~model_historicalborrowlong() { }
  
  inline std::string model_name() const final { return "model_historicalborrowlong"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_historicalborrowlong(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_historicalborrowlong_namespace::model_historicalborrowlong";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 126;
      context__.validate_dims("data initialization","model_type","int",
          context__.to_vec());
      model_type = std::numeric_limits<int>::min();
      
      current_statement__ = 126;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 126;
      current_statement__ = 126;
      check_greater_or_equal(function__, "model_type", model_type, 1);
      current_statement__ = 126;
      current_statement__ = 126;
      check_less_or_equal(function__, "model_type", model_type, 3);
      current_statement__ = 127;
      context__.validate_dims("data initialization","n_alpha","int",
          context__.to_vec());
      n_alpha = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      n_alpha = context__.vals_i("n_alpha")[(1 - 1)];
      current_statement__ = 127;
      current_statement__ = 127;
      check_greater_or_equal(function__, "n_alpha", n_alpha, 0);
      current_statement__ = 128;
      context__.validate_dims("data initialization","n_mu","int",
          context__.to_vec());
      n_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 128;
      n_mu = context__.vals_i("n_mu")[(1 - 1)];
      current_statement__ = 128;
      current_statement__ = 128;
      check_greater_or_equal(function__, "n_mu", n_mu, 0);
      current_statement__ = 129;
      context__.validate_dims("data initialization","n_tau","int",
          context__.to_vec());
      n_tau = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      n_tau = context__.vals_i("n_tau")[(1 - 1)];
      current_statement__ = 129;
      current_statement__ = 129;
      check_greater_or_equal(function__, "n_tau", n_tau, 0);
      current_statement__ = 130;
      context__.validate_dims("data initialization","n_delta","int",
          context__.to_vec());
      n_delta = std::numeric_limits<int>::min();
      
      current_statement__ = 130;
      n_delta = context__.vals_i("n_delta")[(1 - 1)];
      current_statement__ = 130;
      current_statement__ = 130;
      check_greater_or_equal(function__, "n_delta", n_delta, 0);
      current_statement__ = 131;
      context__.validate_dims("data initialization","n_beta","int",
          context__.to_vec());
      n_beta = std::numeric_limits<int>::min();
      
      current_statement__ = 131;
      n_beta = context__.vals_i("n_beta")[(1 - 1)];
      current_statement__ = 131;
      current_statement__ = 131;
      check_greater_or_equal(function__, "n_beta", n_beta, 0);
      current_statement__ = 132;
      context__.validate_dims("data initialization","n_observe","int",
          context__.to_vec());
      n_observe = std::numeric_limits<int>::min();
      
      current_statement__ = 132;
      n_observe = context__.vals_i("n_observe")[(1 - 1)];
      current_statement__ = 132;
      current_statement__ = 132;
      check_greater_or_equal(function__, "n_observe", n_observe, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization","n_missing","int",
          context__.to_vec());
      n_missing = std::numeric_limits<int>::min();
      
      current_statement__ = 133;
      n_missing = context__.vals_i("n_missing")[(1 - 1)];
      current_statement__ = 133;
      current_statement__ = 133;
      check_greater_or_equal(function__, "n_missing", n_missing, 0);
      current_statement__ = 134;
      context__.validate_dims("data initialization","n_patient","int",
          context__.to_vec());
      n_patient = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      n_patient = context__.vals_i("n_patient")[(1 - 1)];
      current_statement__ = 134;
      current_statement__ = 134;
      check_greater_or_equal(function__, "n_patient", n_patient, 0);
      current_statement__ = 135;
      context__.validate_dims("data initialization","n_rep","int",
          context__.to_vec());
      n_rep = std::numeric_limits<int>::min();
      
      current_statement__ = 135;
      n_rep = context__.vals_i("n_rep")[(1 - 1)];
      current_statement__ = 135;
      current_statement__ = 135;
      check_greater_or_equal(function__, "n_rep", n_rep, 0);
      current_statement__ = 136;
      context__.validate_dims("data initialization","n_study","int",
          context__.to_vec());
      n_study = std::numeric_limits<int>::min();
      
      current_statement__ = 136;
      n_study = context__.vals_i("n_study")[(1 - 1)];
      current_statement__ = 136;
      current_statement__ = 136;
      check_greater_or_equal(function__, "n_study", n_study, 0);
      current_statement__ = 137;
      context__.validate_dims("data initialization","n_study_x_beta","int",
          context__.to_vec());
      n_study_x_beta = std::numeric_limits<int>::min();
      
      current_statement__ = 137;
      n_study_x_beta = context__.vals_i("n_study_x_beta")[(1 - 1)];
      current_statement__ = 137;
      current_statement__ = 137;
      check_greater_or_equal(function__, "n_study_x_beta", n_study_x_beta, 0);
      current_statement__ = 138;
      context__.validate_dims("data initialization","n_lambda_current","int",
          context__.to_vec());
      n_lambda_current = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      n_lambda_current = context__.vals_i("n_lambda_current")[(1 - 1)];
      current_statement__ = 138;
      current_statement__ = 138;
      check_greater_or_equal(function__, "n_lambda_current",
                             n_lambda_current, 0);
      current_statement__ = 139;
      context__.validate_dims("data initialization","n_lambda_historical",
          "int",context__.to_vec());
      n_lambda_historical = std::numeric_limits<int>::min();
      
      current_statement__ = 139;
      n_lambda_historical = context__.vals_i("n_lambda_historical")[(1 - 1)];
      current_statement__ = 139;
      current_statement__ = 139;
      check_greater_or_equal(function__, "n_lambda_historical",
                             n_lambda_historical, 0);
      current_statement__ = 140;
      context__.validate_dims("data initialization","n_rho_current","int",
          context__.to_vec());
      n_rho_current = std::numeric_limits<int>::min();
      
      current_statement__ = 140;
      n_rho_current = context__.vals_i("n_rho_current")[(1 - 1)];
      current_statement__ = 140;
      current_statement__ = 140;
      check_greater_or_equal(function__, "n_rho_current", n_rho_current, 0);
      current_statement__ = 141;
      context__.validate_dims("data initialization","n_rho_historical","int",
          context__.to_vec());
      n_rho_historical = std::numeric_limits<int>::min();
      
      current_statement__ = 141;
      n_rho_historical = context__.vals_i("n_rho_historical")[(1 - 1)];
      current_statement__ = 141;
      current_statement__ = 141;
      check_greater_or_equal(function__, "n_rho_historical",
                             n_rho_historical, 0);
      current_statement__ = 142;
      validate_non_negative_index("n_patient_study", "n_study", n_study);
      current_statement__ = 143;
      context__.validate_dims("data initialization","n_patient_study","int",
          context__.to_vec(n_study));
      n_patient_study = std::vector<int>(n_study, std::numeric_limits<int>::min());
      
      current_statement__ = 143;
      assign(n_patient_study, nil_index_list(),
        context__.vals_i("n_patient_study"),
        "assigning variable n_patient_study");
      current_statement__ = 143;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 143;
        current_statement__ = 143;
        check_greater_or_equal(function__, "n_patient_study[sym1__]",
                               n_patient_study[(sym1__ - 1)], 0);}
      current_statement__ = 144;
      validate_non_negative_index("index_patient_study", "n_study", n_study);
      current_statement__ = 145;
      context__.validate_dims("data initialization","index_patient_study",
          "int",context__.to_vec(n_study));
      index_patient_study = std::vector<int>(n_study, std::numeric_limits<int>::min());
      
      current_statement__ = 145;
      assign(index_patient_study, nil_index_list(),
        context__.vals_i("index_patient_study"),
        "assigning variable index_patient_study");
      current_statement__ = 145;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 145;
        current_statement__ = 145;
        check_greater_or_equal(function__, "index_patient_study[sym1__]",
                               index_patient_study[(sym1__ - 1)], 0);}
      current_statement__ = 146;
      validate_non_negative_index("index_patient", "n_observe", n_observe);
      current_statement__ = 147;
      context__.validate_dims("data initialization","index_patient","int",
          context__.to_vec(n_observe));
      index_patient = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 147;
      assign(index_patient, nil_index_list(),
        context__.vals_i("index_patient"), "assigning variable index_patient");
      current_statement__ = 147;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 147;
        current_statement__ = 147;
        check_greater_or_equal(function__, "index_patient[sym1__]",
                               index_patient[(sym1__ - 1)], 0);}
      current_statement__ = 148;
      context__.validate_dims("data initialization","s_alpha","double",
          context__.to_vec());
      s_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 148;
      s_alpha = context__.vals_r("s_alpha")[(1 - 1)];
      current_statement__ = 148;
      current_statement__ = 148;
      check_greater_or_equal(function__, "s_alpha", s_alpha, 0);
      current_statement__ = 149;
      context__.validate_dims("data initialization","s_mu","double",
          context__.to_vec());
      s_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 149;
      s_mu = context__.vals_r("s_mu")[(1 - 1)];
      current_statement__ = 149;
      current_statement__ = 149;
      check_greater_or_equal(function__, "s_mu", s_mu, 0);
      current_statement__ = 150;
      context__.validate_dims("data initialization","s_tau","double",
          context__.to_vec());
      s_tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 150;
      s_tau = context__.vals_r("s_tau")[(1 - 1)];
      current_statement__ = 150;
      current_statement__ = 150;
      check_greater_or_equal(function__, "s_tau", s_tau, 0);
      current_statement__ = 151;
      context__.validate_dims("data initialization","s_beta","double",
          context__.to_vec());
      s_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 151;
      s_beta = context__.vals_r("s_beta")[(1 - 1)];
      current_statement__ = 151;
      current_statement__ = 151;
      check_greater_or_equal(function__, "s_beta", s_beta, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization","s_delta","double",
          context__.to_vec());
      s_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 152;
      s_delta = context__.vals_r("s_delta")[(1 - 1)];
      current_statement__ = 152;
      current_statement__ = 152;
      check_greater_or_equal(function__, "s_delta", s_delta, 0);
      current_statement__ = 153;
      context__.validate_dims("data initialization","s_sigma","double",
          context__.to_vec());
      s_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 153;
      s_sigma = context__.vals_r("s_sigma")[(1 - 1)];
      current_statement__ = 153;
      current_statement__ = 153;
      check_greater_or_equal(function__, "s_sigma", s_sigma, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization","s_lambda","double",
          context__.to_vec());
      s_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 154;
      s_lambda = context__.vals_r("s_lambda")[(1 - 1)];
      current_statement__ = 154;
      current_statement__ = 154;
      check_greater_or_equal(function__, "s_lambda", s_lambda, 0);
      current_statement__ = 155;
      validate_non_negative_index("missing", "n_observe", n_observe);
      current_statement__ = 156;
      context__.validate_dims("data initialization","missing","int",
          context__.to_vec(n_observe));
      missing = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 156;
      assign(missing, nil_index_list(), context__.vals_i("missing"),
        "assigning variable missing");
      current_statement__ = 156;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 156;
        current_statement__ = 156;
        check_greater_or_equal(function__, "missing[sym1__]",
                               missing[(sym1__ - 1)], 0);}
      current_statement__ = 157;
      validate_non_negative_index("count_missing", "n_observe", n_observe);
      current_statement__ = 158;
      context__.validate_dims("data initialization","count_missing","int",
          context__.to_vec(n_observe));
      count_missing = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 158;
      assign(count_missing, nil_index_list(),
        context__.vals_i("count_missing"), "assigning variable count_missing");
      current_statement__ = 158;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 158;
        current_statement__ = 158;
        check_greater_or_equal(function__, "count_missing[sym1__]",
                               count_missing[(sym1__ - 1)], 0);}
      current_statement__ = 159;
      validate_non_negative_index("study_index", "n_observe", n_observe);
      current_statement__ = 160;
      context__.validate_dims("data initialization","study_index","int",
          context__.to_vec(n_observe));
      study_index = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 160;
      assign(study_index, nil_index_list(), context__.vals_i("study_index"),
        "assigning variable study_index");
      current_statement__ = 160;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 160;
        current_statement__ = 160;
        check_greater_or_equal(function__, "study_index[sym1__]",
                               study_index[(sym1__ - 1)], 0);}
      current_statement__ = 161;
      validate_non_negative_index("alpha_rep_index", "n_alpha", n_alpha);
      current_statement__ = 162;
      context__.validate_dims("data initialization","alpha_rep_index","int",
          context__.to_vec(n_alpha));
      alpha_rep_index = std::vector<int>(n_alpha, std::numeric_limits<int>::min());
      
      current_statement__ = 162;
      assign(alpha_rep_index, nil_index_list(),
        context__.vals_i("alpha_rep_index"),
        "assigning variable alpha_rep_index");
      current_statement__ = 162;
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        current_statement__ = 162;
        current_statement__ = 162;
        check_greater_or_equal(function__, "alpha_rep_index[sym1__]",
                               alpha_rep_index[(sym1__ - 1)], 0);}
      current_statement__ = 163;
      validate_non_negative_index("alpha_data_index", "n_observe", n_observe);
      current_statement__ = 164;
      context__.validate_dims("data initialization","alpha_data_index","int",
          context__.to_vec(n_observe));
      alpha_data_index = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 164;
      assign(alpha_data_index, nil_index_list(),
        context__.vals_i("alpha_data_index"),
        "assigning variable alpha_data_index");
      current_statement__ = 164;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 164;
        current_statement__ = 164;
        check_greater_or_equal(function__, "alpha_data_index[sym1__]",
                               alpha_data_index[(sym1__ - 1)], 0);}
      current_statement__ = 165;
      validate_non_negative_index("delta_data_index", "n_observe", n_observe);
      current_statement__ = 166;
      context__.validate_dims("data initialization","delta_data_index","int",
          context__.to_vec(n_observe));
      delta_data_index = std::vector<int>(n_observe, std::numeric_limits<int>::min());
      
      current_statement__ = 166;
      assign(delta_data_index, nil_index_list(),
        context__.vals_i("delta_data_index"),
        "assigning variable delta_data_index");
      current_statement__ = 166;
      for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
        current_statement__ = 166;
        current_statement__ = 166;
        check_greater_or_equal(function__, "delta_data_index[sym1__]",
                               delta_data_index[(sym1__ - 1)], 0);}
      current_statement__ = 167;
      validate_non_negative_index("x_beta_col_index", "n_study_x_beta",
                                  n_study_x_beta);
      current_statement__ = 168;
      context__.validate_dims("data initialization","x_beta_col_index","int",
          context__.to_vec(n_study_x_beta));
      x_beta_col_index = std::vector<int>(n_study_x_beta, std::numeric_limits<int>::min());
      
      current_statement__ = 168;
      assign(x_beta_col_index, nil_index_list(),
        context__.vals_i("x_beta_col_index"),
        "assigning variable x_beta_col_index");
      current_statement__ = 168;
      for (int sym1__ = 1; sym1__ <= n_study_x_beta; ++sym1__) {
        current_statement__ = 168;
        current_statement__ = 168;
        check_greater_or_equal(function__, "x_beta_col_index[sym1__]",
                               x_beta_col_index[(sym1__ - 1)], 0);}
      current_statement__ = 169;
      validate_non_negative_index("x_beta_row_index", "n_study_x_beta",
                                  n_study_x_beta);
      current_statement__ = 170;
      context__.validate_dims("data initialization","x_beta_row_index","int",
          context__.to_vec(n_study_x_beta));
      x_beta_row_index = std::vector<int>(n_study_x_beta, std::numeric_limits<int>::min());
      
      current_statement__ = 170;
      assign(x_beta_row_index, nil_index_list(),
        context__.vals_i("x_beta_row_index"),
        "assigning variable x_beta_row_index");
      current_statement__ = 170;
      for (int sym1__ = 1; sym1__ <= n_study_x_beta; ++sym1__) {
        current_statement__ = 170;
        current_statement__ = 170;
        check_greater_or_equal(function__, "x_beta_row_index[sym1__]",
                               x_beta_row_index[(sym1__ - 1)], 0);}
      current_statement__ = 171;
      validate_non_negative_index("x_beta_col_n", "n_study_x_beta",
                                  n_study_x_beta);
      current_statement__ = 172;
      context__.validate_dims("data initialization","x_beta_col_n","int",
          context__.to_vec(n_study_x_beta));
      x_beta_col_n = std::vector<int>(n_study_x_beta, std::numeric_limits<int>::min());
      
      current_statement__ = 172;
      assign(x_beta_col_n, nil_index_list(),
        context__.vals_i("x_beta_col_n"), "assigning variable x_beta_col_n");
      current_statement__ = 172;
      for (int sym1__ = 1; sym1__ <= n_study_x_beta; ++sym1__) {
        current_statement__ = 172;
        current_statement__ = 172;
        check_greater_or_equal(function__, "x_beta_col_n[sym1__]",
                               x_beta_col_n[(sym1__ - 1)], 0);}
      current_statement__ = 173;
      validate_non_negative_index("x_beta_row_n", "n_study_x_beta",
                                  n_study_x_beta);
      current_statement__ = 174;
      context__.validate_dims("data initialization","x_beta_row_n","int",
          context__.to_vec(n_study_x_beta));
      x_beta_row_n = std::vector<int>(n_study_x_beta, std::numeric_limits<int>::min());
      
      current_statement__ = 174;
      assign(x_beta_row_n, nil_index_list(),
        context__.vals_i("x_beta_row_n"), "assigning variable x_beta_row_n");
      current_statement__ = 174;
      for (int sym1__ = 1; sym1__ <= n_study_x_beta; ++sym1__) {
        current_statement__ = 174;
        current_statement__ = 174;
        check_greater_or_equal(function__, "x_beta_row_n[sym1__]",
                               x_beta_row_n[(sym1__ - 1)], 0);}
      current_statement__ = 175;
      validate_non_negative_index("study_patient", "n_patient", n_patient);
      current_statement__ = 176;
      context__.validate_dims("data initialization","study_patient","int",
          context__.to_vec(n_patient));
      study_patient = std::vector<int>(n_patient, std::numeric_limits<int>::min());
      
      current_statement__ = 176;
      assign(study_patient, nil_index_list(),
        context__.vals_i("study_patient"), "assigning variable study_patient");
      current_statement__ = 176;
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        current_statement__ = 176;
        current_statement__ = 176;
        check_greater_or_equal(function__, "study_patient[sym1__]",
                               study_patient[(sym1__ - 1)], 0);}
      current_statement__ = 176;
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        current_statement__ = 176;
        current_statement__ = 176;
        check_less_or_equal(function__, "study_patient[sym1__]",
                            study_patient[(sym1__ - 1)], n_patient);}
      current_statement__ = 177;
      validate_non_negative_index("y", "n_observe", n_observe);
      current_statement__ = 178;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n_observe));
      y = Eigen::Matrix<double, -1, 1>(n_observe);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 178;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 178;
        pos__ = 1;
        current_statement__ = 178;
        for (int sym1__ = 1; sym1__ <= n_observe; ++sym1__) {
          current_statement__ = 178;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 178;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 179;
      validate_non_negative_index("x_alpha", "n_observe", n_observe);
      current_statement__ = 180;
      validate_non_negative_index("x_alpha", "n_alpha", n_alpha);
      current_statement__ = 181;
      context__.validate_dims("data initialization","x_alpha","double",
          context__.to_vec(n_observe, n_alpha));
      x_alpha = Eigen::Matrix<double, -1, -1>(n_observe, n_alpha);
      stan::math::fill(x_alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_alpha_flat__;
        current_statement__ = 181;
        assign(x_alpha_flat__, nil_index_list(), context__.vals_r("x_alpha"),
          "assigning variable x_alpha_flat__");
        current_statement__ = 181;
        pos__ = 1;
        current_statement__ = 181;
        for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
          current_statement__ = 181;
          for (int sym2__ = 1; sym2__ <= n_observe; ++sym2__) {
            current_statement__ = 181;
            assign(x_alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_alpha_flat__[(pos__ - 1)], "assigning variable x_alpha");
            current_statement__ = 181;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 182;
      validate_non_negative_index("x_delta", "n_observe", n_observe);
      current_statement__ = 183;
      validate_non_negative_index("x_delta", "n_delta", n_delta);
      current_statement__ = 184;
      context__.validate_dims("data initialization","x_delta","double",
          context__.to_vec(n_observe, n_delta));
      x_delta = Eigen::Matrix<double, -1, -1>(n_observe, n_delta);
      stan::math::fill(x_delta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_delta_flat__;
        current_statement__ = 184;
        assign(x_delta_flat__, nil_index_list(), context__.vals_r("x_delta"),
          "assigning variable x_delta_flat__");
        current_statement__ = 184;
        pos__ = 1;
        current_statement__ = 184;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 184;
          for (int sym2__ = 1; sym2__ <= n_observe; ++sym2__) {
            current_statement__ = 184;
            assign(x_delta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_delta_flat__[(pos__ - 1)], "assigning variable x_delta");
            current_statement__ = 184;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 185;
      validate_non_negative_index("x_beta", "n_beta", n_beta);
      current_statement__ = 186;
      validate_non_negative_index("x_beta", "n_patient", n_patient);
      current_statement__ = 187;
      context__.validate_dims("data initialization","x_beta","double",
          context__.to_vec(n_beta, n_patient));
      x_beta = Eigen::Matrix<double, -1, -1>(n_beta, n_patient);
      stan::math::fill(x_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_beta_flat__;
        current_statement__ = 187;
        assign(x_beta_flat__, nil_index_list(), context__.vals_r("x_beta"),
          "assigning variable x_beta_flat__");
        current_statement__ = 187;
        pos__ = 1;
        current_statement__ = 187;
        for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
          current_statement__ = 187;
          for (int sym2__ = 1; sym2__ <= n_beta; ++sym2__) {
            current_statement__ = 187;
            assign(x_beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_beta_flat__[(pos__ - 1)], "assigning variable x_beta");
            current_statement__ = 187;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 188;
      context__.validate_dims("data initialization","covariance_current",
          "int",context__.to_vec());
      covariance_current = std::numeric_limits<int>::min();
      
      current_statement__ = 188;
      covariance_current = context__.vals_i("covariance_current")[(1 - 1)];
      current_statement__ = 188;
      current_statement__ = 188;
      check_greater_or_equal(function__, "covariance_current",
                             covariance_current, 1);
      current_statement__ = 188;
      current_statement__ = 188;
      check_less_or_equal(function__, "covariance_current",
                          covariance_current, 3);
      current_statement__ = 189;
      context__.validate_dims("data initialization","covariance_historical",
          "int",context__.to_vec());
      covariance_historical = std::numeric_limits<int>::min();
      
      current_statement__ = 189;
      covariance_historical = context__.vals_i("covariance_historical")[
          (1 - 1)];
      current_statement__ = 189;
      current_statement__ = 189;
      check_greater_or_equal(function__, "covariance_historical",
                             covariance_historical, 1);
      current_statement__ = 189;
      current_statement__ = 189;
      check_less_or_equal(function__, "covariance_historical",
                          covariance_historical, 3);
      current_statement__ = 190;
      context__.validate_dims("data initialization",
          "covariance_unstructured","int",context__.to_vec());
      covariance_unstructured = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      covariance_unstructured = context__.vals_i("covariance_unstructured")[
          (1 - 1)];
      current_statement__ = 191;
      context__.validate_dims("data initialization","covariance_ar1","int",
          context__.to_vec());
      covariance_ar1 = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      covariance_ar1 = context__.vals_i("covariance_ar1")[(1 - 1)];
      current_statement__ = 192;
      context__.validate_dims("data initialization","covariance_diagonal",
          "int",context__.to_vec());
      covariance_diagonal = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      covariance_diagonal = context__.vals_i("covariance_diagonal")[(1 - 1)];
      current_statement__ = 193;
      validate_non_negative_index("y_missing", "n_missing", n_missing);
      current_statement__ = 194;
      validate_non_negative_index("alpha_raw", "n_alpha", n_alpha);
      current_statement__ = 195;
      validate_non_negative_index("mu", "n_mu", n_mu);
      current_statement__ = 196;
      validate_non_negative_index("tau", "n_tau", n_tau);
      current_statement__ = 197;
      validate_non_negative_index("delta", "n_delta", n_delta);
      current_statement__ = 198;
      validate_non_negative_index("beta", "n_beta", n_beta);
      current_statement__ = 199;
      validate_non_negative_index("sigma", "n_study", n_study);
      current_statement__ = 200;
      validate_non_negative_index("sigma", "n_rep", n_rep);
      current_statement__ = 201;
      validate_non_negative_index("lambda_current", "n_lambda_current",
                                  n_lambda_current);
      current_statement__ = 202;
      validate_non_negative_index("lambda_current", "n_rep", n_rep);
      current_statement__ = 202;
      validate_non_negative_index("lambda_current", "n_rep", n_rep);
      current_statement__ = 203;
      validate_non_negative_index("lambda_historical", "n_lambda_historical",
                                  n_lambda_historical);
      current_statement__ = 204;
      validate_non_negative_index("lambda_historical", "n_rep", n_rep);
      current_statement__ = 204;
      validate_non_negative_index("lambda_historical", "n_rep", n_rep);
      current_statement__ = 205;
      validate_non_negative_index("rho_current", "n_rho_current",
                                  n_rho_current);
      current_statement__ = 206;
      validate_non_negative_index("rho_historical", "n_rho_historical",
                                  n_rho_historical);
      current_statement__ = 207;
      validate_non_negative_index("alpha", "n_alpha", n_alpha);
      current_statement__ = 208;
      validate_non_negative_index("epsilon", "n_rep", n_rep);
      current_statement__ = 209;
      validate_non_negative_index("epsilon", "n_patient", n_patient);
      current_statement__ = 210;
      validate_non_negative_index("covariance_cholesky", "n_study", n_study);
      current_statement__ = 211;
      validate_non_negative_index("covariance_cholesky", "n_rep", n_rep);
      current_statement__ = 212;
      validate_non_negative_index("covariance_cholesky", "n_rep", n_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_missing;
      num_params_r__ += n_alpha;
      num_params_r__ += n_mu;
      num_params_r__ += n_tau;
      num_params_r__ += n_delta;
      num_params_r__ += n_beta;
      num_params_r__ += n_study * n_rep;
      num_params_r__ += n_lambda_current * ((n_rep * (n_rep - 1)) / 2);
      num_params_r__ += n_lambda_historical * ((n_rep * (n_rep - 1)) / 2);
      num_params_r__ += n_rho_current;
      num_params_r__ += n_rho_historical;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_historicalborrowlong_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> y_missing;
      y_missing = Eigen::Matrix<local_scalar_t__, -1, 1>(n_missing);
      stan::math::fill(y_missing, DUMMY_VAR__);
      
      current_statement__ = 1;
      y_missing = in__.vector(n_missing);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(n_alpha);
      stan::math::fill(alpha_raw, DUMMY_VAR__);
      
      current_statement__ = 2;
      alpha_raw = in__.vector(n_alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(n_mu);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 3;
      mu = in__.vector(n_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau;
      tau = Eigen::Matrix<local_scalar_t__, -1, 1>(n_tau);
      stan::math::fill(tau, DUMMY_VAR__);
      
      current_statement__ = 4;
      tau = in__.vector(n_tau);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(tau[(sym1__ - 1)], 0, s_tau, lp__),
            "assigning variable tau");
        } else {
          current_statement__ = 4;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(tau[(sym1__ - 1)], 0, s_tau),
            "assigning variable tau");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> delta;
      delta = Eigen::Matrix<local_scalar_t__, -1, 1>(n_delta);
      stan::math::fill(delta, DUMMY_VAR__);
      
      current_statement__ = 5;
      delta = in__.vector(n_delta);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(n_beta);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 6;
      beta = in__.vector(n_beta);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> sigma;
      sigma = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_study, Eigen::Matrix<local_scalar_t__, -1, 1>(n_rep));
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 7;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_rep), "assigning variable sigma");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          current_statement__ = 7;
          if (jacobian__) {
            current_statement__ = 7;
            assign(sigma,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(sigma[(sym1__ - 1)][(sym2__ - 1)], 0,
                s_sigma, lp__), "assigning variable sigma");
          } else {
            current_statement__ = 7;
            assign(sigma,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(sigma[(sym1__ - 1)][(sym2__ - 1)], 0,
                s_sigma), "assigning variable sigma");
          }}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> lambda_current;
      lambda_current = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(n_lambda_current, Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_current, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lambda_current_in__;
      lambda_current_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_lambda_current, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_current_in__, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        current_statement__ = 8;
        assign(lambda_current_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((n_rep * (n_rep - 1)) / 2)),
          "assigning variable lambda_current_in__");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(lambda_current,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              lambda_current_in__[(sym1__ - 1)], n_rep, lp__),
            "assigning variable lambda_current");
        } else {
          current_statement__ = 8;
          assign(lambda_current,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              lambda_current_in__[(sym1__ - 1)], n_rep),
            "assigning variable lambda_current");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> lambda_historical;
      lambda_historical = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(n_lambda_historical, Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_historical, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lambda_historical_in__;
      lambda_historical_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_lambda_historical, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_historical_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        current_statement__ = 9;
        assign(lambda_historical_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((n_rep * (n_rep - 1)) / 2)),
          "assigning variable lambda_historical_in__");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(lambda_historical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              lambda_historical_in__[(sym1__ - 1)], n_rep, lp__),
            "assigning variable lambda_historical");
        } else {
          current_statement__ = 9;
          assign(lambda_historical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              lambda_historical_in__[(sym1__ - 1)], n_rep),
            "assigning variable lambda_historical");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_current;
      rho_current = Eigen::Matrix<local_scalar_t__, -1, 1>(n_rho_current);
      stan::math::fill(rho_current, DUMMY_VAR__);
      
      current_statement__ = 10;
      rho_current = in__.vector(n_rho_current);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(rho_current, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho_current[(sym1__ - 1)], -1, 1, lp__),
            "assigning variable rho_current");
        } else {
          current_statement__ = 10;
          assign(rho_current, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho_current[(sym1__ - 1)], -1, 1),
            "assigning variable rho_current");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_historical;
      rho_historical = Eigen::Matrix<local_scalar_t__, -1, 1>(n_rho_historical);
      stan::math::fill(rho_historical, DUMMY_VAR__);
      
      current_statement__ = 11;
      rho_historical = in__.vector(n_rho_historical);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(rho_historical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho_historical[(sym1__ - 1)], -1, 1,
              lp__), "assigning variable rho_historical");
        } else {
          current_statement__ = 11;
          assign(rho_historical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho_historical[(sym1__ - 1)], -1, 1),
            "assigning variable rho_historical");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(n_alpha);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> epsilon;
      epsilon = Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_patient);
      stan::math::fill(epsilon, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> covariance_cholesky;
      covariance_cholesky = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(n_study, Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_rep));
      stan::math::fill(covariance_cholesky, DUMMY_VAR__);
      
      {
        int index;
        index = std::numeric_limits<int>::min();
        
        int last_visit;
        last_visit = std::numeric_limits<int>::min();
        
        int first_visit;
        first_visit = std::numeric_limits<int>::min();
        
        int col_i;
        col_i = std::numeric_limits<int>::min();
        
        int row_i;
        row_i = std::numeric_limits<int>::min();
        
        int col_n;
        col_n = std::numeric_limits<int>::min();
        
        int row_n;
        row_n = std::numeric_limits<int>::min();
        
        current_statement__ = 22;
        validate_non_negative_index("alpha_latent", "n_alpha + 1",
                                    (n_alpha + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> alpha_latent;
        alpha_latent = Eigen::Matrix<local_scalar_t__, -1, 1>((n_alpha + 1));
        stan::math::fill(alpha_latent, DUMMY_VAR__);
        
        current_statement__ = 24;
        validate_non_negative_index("delta_latent", "n_delta + 1",
                                    (n_delta + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> delta_latent;
        delta_latent = Eigen::Matrix<local_scalar_t__, -1, 1>((n_delta + 1));
        stan::math::fill(delta_latent, DUMMY_VAR__);
        
        current_statement__ = 26;
        validate_non_negative_index("x_beta_vector", "n_patient", n_patient);
        Eigen::Matrix<local_scalar_t__, -1, 1> x_beta_vector;
        x_beta_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(n_patient);
        stan::math::fill(x_beta_vector, DUMMY_VAR__);
        
        current_statement__ = 28;
        validate_non_negative_index("means", "n_observe", n_observe);
        Eigen::Matrix<local_scalar_t__, -1, 1> means;
        means = Eigen::Matrix<local_scalar_t__, -1, 1>(n_observe);
        stan::math::fill(means, DUMMY_VAR__);
        
        current_statement__ = 30;
        validate_non_negative_index("means_matrix", "n_rep", n_rep);
        current_statement__ = 31;
        validate_non_negative_index("means_matrix", "n_patient", n_patient);
        Eigen::Matrix<local_scalar_t__, -1, -1> means_matrix;
        means_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_patient);
        stan::math::fill(means_matrix, DUMMY_VAR__);
        
        current_statement__ = 33;
        validate_non_negative_index("y_imputed", "n_observe", n_observe);
        Eigen::Matrix<local_scalar_t__, -1, 1> y_imputed;
        y_imputed = Eigen::Matrix<local_scalar_t__, -1, 1>(n_observe);
        stan::math::fill(y_imputed, DUMMY_VAR__);
        
        current_statement__ = 35;
        validate_non_negative_index("y_matrix", "n_rep", n_rep);
        current_statement__ = 36;
        validate_non_negative_index("y_matrix", "n_patient", n_patient);
        Eigen::Matrix<local_scalar_t__, -1, -1> y_matrix;
        y_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(n_rep, n_patient);
        stan::math::fill(y_matrix, DUMMY_VAR__);
        
        current_statement__ = 42;
        if (logical_eq(model_type, 3)) {
          current_statement__ = 40;
          assign(alpha, nil_index_list(),
            add(
              rvalue(mu,
                cons_list(index_multi(alpha_rep_index), nil_index_list()),
                "mu"),
              elt_multiply(
                rvalue(tau,
                  cons_list(index_multi(alpha_rep_index), nil_index_list()),
                  "tau"), alpha_raw)), "assigning variable alpha");
        } else {
          current_statement__ = 38;
          assign(alpha, nil_index_list(), alpha_raw,
            "assigning variable alpha");
        }
        current_statement__ = 43;
        assign(alpha_latent, cons_list(index_uni(1), nil_index_list()), 0,
          "assigning variable alpha_latent");
        current_statement__ = 44;
        assign(alpha_latent,
          cons_list(index_min_max(2, (n_alpha + 1)), nil_index_list()),
          alpha, "assigning variable alpha_latent");
        current_statement__ = 45;
        assign(delta_latent, cons_list(index_uni(1), nil_index_list()), 0,
          "assigning variable delta_latent");
        current_statement__ = 46;
        assign(delta_latent,
          cons_list(index_min_max(2, (n_delta + 1)), nil_index_list()),
          delta, "assigning variable delta_latent");
        current_statement__ = 47;
        assign(x_beta_vector, nil_index_list(), rep_vector(0, n_patient),
          "assigning variable x_beta_vector");
        current_statement__ = 56;
        if (logical_gt(n_beta, 0)) {
          current_statement__ = 54;
          for (int i = 1; i <= n_study_x_beta; ++i) {
            current_statement__ = 48;
            col_i = x_beta_col_index[(i - 1)];
            current_statement__ = 49;
            row_i = x_beta_row_index[(i - 1)];
            current_statement__ = 50;
            col_n = x_beta_col_n[(i - 1)];
            current_statement__ = 51;
            row_n = x_beta_row_n[(i - 1)];
            current_statement__ = 52;
            assign(x_beta_vector,
              cons_list(index_min_max(col_i, ((col_i + col_n) - 1)),
                nil_index_list()),
              transpose(
                multiply(
                  transpose(
                    rvalue(beta,
                      cons_list(index_min_max(row_i, ((row_i + row_n) - 1)),
                        nil_index_list()), "beta")),
                  block(x_beta, row_i, col_i, row_n, col_n))),
              "assigning variable x_beta_vector");}
        } 
        current_statement__ = 61;
        if (logical_gt(n_beta, 0)) {
          current_statement__ = 59;
          assign(means, nil_index_list(),
            add(
              add(
                rvalue(alpha_latent,
                  cons_list(index_multi(alpha_data_index), nil_index_list()),
                  "alpha_latent"),
                rvalue(delta_latent,
                  cons_list(index_multi(delta_data_index), nil_index_list()),
                  "delta_latent")),
              rvalue(x_beta_vector,
                cons_list(index_multi(index_patient), nil_index_list()),
                "x_beta_vector")), "assigning variable means");
        } else {
          current_statement__ = 57;
          assign(means, nil_index_list(),
            add(
              rvalue(alpha_latent,
                cons_list(index_multi(alpha_data_index), nil_index_list()),
                "alpha_latent"),
              rvalue(delta_latent,
                cons_list(index_multi(delta_data_index), nil_index_list()),
                "delta_latent")), "assigning variable means");
        }
        current_statement__ = 69;
        if (logical_eq(covariance_current, covariance_unstructured)) {
          current_statement__ = 67;
          assign(covariance_cholesky,
            cons_list(index_uni(n_study), nil_index_list()),
            diag_pre_multiply(sigma[(n_study - 1)], lambda_current[(1 - 1)]),
            "assigning variable covariance_cholesky");
        } else {
          current_statement__ = 66;
          if (logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 64;
            assign(covariance_cholesky,
              cons_list(index_uni(n_study), nil_index_list()),
              diag_pre_multiply(sigma[(n_study - 1)],
                ar1_cholesky(rho_current[(1 - 1)], n_rep, pstream__)),
              "assigning variable covariance_cholesky");
          } else {
            current_statement__ = 62;
            assign(covariance_cholesky,
              cons_list(index_uni(n_study), nil_index_list()),
              diag_matrix(sigma[(n_study - 1)]),
              "assigning variable covariance_cholesky");
          }
        }
        current_statement__ = 79;
        for (int i = 1; i <= (n_study - 1); ++i) {
          current_statement__ = 77;
          if (logical_eq(covariance_historical, covariance_unstructured)) {
            current_statement__ = 75;
            assign(covariance_cholesky,
              cons_list(index_uni(i), nil_index_list()),
              diag_pre_multiply(sigma[(i - 1)], lambda_historical[(i - 1)]),
              "assigning variable covariance_cholesky");
          } else {
            current_statement__ = 74;
            if (logical_eq(covariance_historical, covariance_ar1)) {
              current_statement__ = 72;
              assign(covariance_cholesky,
                cons_list(index_uni(i), nil_index_list()),
                diag_pre_multiply(sigma[(i - 1)],
                  ar1_cholesky(rho_historical[(i - 1)], n_rep, pstream__)),
                "assigning variable covariance_cholesky");
            } else {
              current_statement__ = 70;
              assign(covariance_cholesky,
                cons_list(index_uni(i), nil_index_list()),
                diag_matrix(sigma[(i - 1)]),
                "assigning variable covariance_cholesky");
            }
          }}
        current_statement__ = 82;
        for (int observation = 1; observation <= n_observe; ++observation) {
          current_statement__ = 80;
          assign(y_imputed,
            cons_list(index_uni(observation), nil_index_list()),
            (logical_eq(missing[(observation - 1)], 1) ?
               stan::math::promote_scalar<local_scalar_t__>(y_missing[
               (count_missing[(observation - 1)] - 1)]) :
               stan::math::promote_scalar<local_scalar_t__>(y[(observation -
                                                                1)])),
            "assigning variable y_imputed");}
        current_statement__ = 83;
        index = 1;
        current_statement__ = 88;
        for (int patient = 1; patient <= n_patient; ++patient) {
          current_statement__ = 84;
          assign(y_matrix,
            cons_list(index_omni(),
              cons_list(index_uni(patient), nil_index_list())),
            segment(y_imputed, index, n_rep), "assigning variable y_matrix");
          current_statement__ = 85;
          assign(means_matrix,
            cons_list(index_omni(),
              cons_list(index_uni(patient), nil_index_list())),
            segment(means, index, n_rep), "assigning variable means_matrix");
          current_statement__ = 86;
          index = (index + n_rep);}
        current_statement__ = 89;
        assign(epsilon, nil_index_list(), subtract(y_matrix, means_matrix),
          "assigning variable epsilon");
      }
      {
        int start;
        start = std::numeric_limits<int>::min();
        
        int end;
        end = std::numeric_limits<int>::min();
        
        int length;
        length = std::numeric_limits<int>::min();
        
        current_statement__ = 99;
        for (int study = 1; study <= n_study; ++study) {
          current_statement__ = 94;
          start = index_patient_study[(study - 1)];
          current_statement__ = 95;
          length = n_patient_study[(study - 1)];
          current_statement__ = 96;
          end = ((start + length) - 1);
          current_statement__ = 97;
          lp_accum__.add(
            sum(
              log_normal_kernel(covariance_cholesky[(study - 1)],
                rvalue(epsilon,
                  cons_list(index_omni(),
                    cons_list(index_min_max(start, end), nil_index_list())),
                  "epsilon"), pstream__)));}
        current_statement__ = 106;
        if (logical_eq(model_type, 3)) {
          current_statement__ = 102;
          lp_accum__.add(std_normal_lpdf<propto__>(alpha_raw));
          current_statement__ = 103;
          lp_accum__.add(normal_lpdf<propto__>(mu, 0, s_mu));
          current_statement__ = 104;
          lp_accum__.add(uniform_lpdf<propto__>(tau, 0, s_tau));
        } else {
          current_statement__ = 100;
          lp_accum__.add(normal_lpdf<propto__>(alpha_raw, 0, s_alpha));
        }
        current_statement__ = 107;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0, s_delta));
        current_statement__ = 108;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, s_beta));
        current_statement__ = 111;
        for (int i = 1; i <= n_study; ++i) {
          current_statement__ = 109;
          lp_accum__.add(uniform_lpdf<propto__>(sigma[(i - 1)], 0, s_sigma));
        }
        current_statement__ = 117;
        if (logical_eq(covariance_current, covariance_unstructured)) {
          current_statement__ = 115;
          lp_accum__.add(
            lkj_corr_cholesky_lpdf<propto__>(lambda_current[(1 - 1)],
              s_lambda));
        } else {
          current_statement__ = 114;
          if (logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 112;
            lp_accum__.add(uniform_lpdf<propto__>(rho_current, -1, 1));
          } 
        }
        current_statement__ = 125;
        if (logical_eq(covariance_historical, covariance_unstructured)) {
          current_statement__ = 123;
          for (int i = 1; i <= n_lambda_historical; ++i) {
            current_statement__ = 121;
            lp_accum__.add(
              lkj_corr_cholesky_lpdf<propto__>(lambda_historical[(i - 1)],
                s_lambda));}
        } else {
          current_statement__ = 120;
          if (logical_eq(covariance_historical, covariance_ar1)) {
            current_statement__ = 118;
            lp_accum__.add(uniform_lpdf<propto__>(rho_historical, -1, 1));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_historicalborrowlong_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> y_missing;
      y_missing = Eigen::Matrix<double, -1, 1>(n_missing);
      stan::math::fill(y_missing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      y_missing = in__.vector(n_missing);
      Eigen::Matrix<double, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<double, -1, 1>(n_alpha);
      stan::math::fill(alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      alpha_raw = in__.vector(n_alpha);
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(n_mu);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      mu = in__.vector(n_mu);
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(n_tau);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      tau = in__.vector(n_tau);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
        current_statement__ = 4;
        assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(tau[(sym1__ - 1)], 0, s_tau),
          "assigning variable tau");}
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(n_delta);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      delta = in__.vector(n_delta);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(n_beta);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      beta = in__.vector(n_beta);
      std::vector<Eigen::Matrix<double, -1, 1>> sigma;
      sigma = std::vector<Eigen::Matrix<double, -1, 1>>(n_study, Eigen::Matrix<double, -1, 1>(n_rep));
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 7;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_rep), "assigning variable sigma");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          current_statement__ = 7;
          assign(sigma,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(sigma[(sym1__ - 1)][(sym2__ - 1)], 0,
              s_sigma), "assigning variable sigma");}}
      std::vector<Eigen::Matrix<double, -1, -1>> lambda_current;
      lambda_current = std::vector<Eigen::Matrix<double, -1, -1>>(n_lambda_current, Eigen::Matrix<double, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_current, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lambda_current_in__;
      lambda_current_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_lambda_current, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_current_in__, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        current_statement__ = 8;
        assign(lambda_current_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((n_rep * (n_rep - 1)) / 2)),
          "assigning variable lambda_current_in__");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        current_statement__ = 8;
        assign(lambda_current,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_constrain(
            lambda_current_in__[(sym1__ - 1)], n_rep),
          "assigning variable lambda_current");}
      std::vector<Eigen::Matrix<double, -1, -1>> lambda_historical;
      lambda_historical = std::vector<Eigen::Matrix<double, -1, -1>>(n_lambda_historical, Eigen::Matrix<double, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_historical, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lambda_historical_in__;
      lambda_historical_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_lambda_historical, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_historical_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        current_statement__ = 9;
        assign(lambda_historical_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((n_rep * (n_rep - 1)) / 2)),
          "assigning variable lambda_historical_in__");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        current_statement__ = 9;
        assign(lambda_historical,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_constrain(
            lambda_historical_in__[(sym1__ - 1)], n_rep),
          "assigning variable lambda_historical");}
      Eigen::Matrix<double, -1, 1> rho_current;
      rho_current = Eigen::Matrix<double, -1, 1>(n_rho_current);
      stan::math::fill(rho_current, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      rho_current = in__.vector(n_rho_current);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
        current_statement__ = 10;
        assign(rho_current, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(rho_current[(sym1__ - 1)], -1, 1),
          "assigning variable rho_current");}
      Eigen::Matrix<double, -1, 1> rho_historical;
      rho_historical = Eigen::Matrix<double, -1, 1>(n_rho_historical);
      stan::math::fill(rho_historical, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      rho_historical = in__.vector(n_rho_historical);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
        current_statement__ = 11;
        assign(rho_historical,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(rho_historical[(sym1__ - 1)], -1, 1),
          "assigning variable rho_historical");}
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(n_alpha);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> epsilon;
      epsilon = Eigen::Matrix<double, -1, -1>(n_rep, n_patient);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> covariance_cholesky;
      covariance_cholesky = std::vector<Eigen::Matrix<double, -1, -1>>(n_study, Eigen::Matrix<double, -1, -1>(n_rep, n_rep));
      stan::math::fill(covariance_cholesky, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
        vars__.emplace_back(y_missing[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        vars__.emplace_back(alpha_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
        vars__.emplace_back(tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
          vars__.emplace_back(sigma[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
            vars__.emplace_back(
              rvalue(lambda_current,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                "lambda_current"));}}}
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
            vars__.emplace_back(
              rvalue(lambda_historical,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                "lambda_historical"));}}}
      for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
        vars__.emplace_back(rho_current[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
        vars__.emplace_back(rho_historical[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        int index;
        index = std::numeric_limits<int>::min();
        
        int last_visit;
        last_visit = std::numeric_limits<int>::min();
        
        int first_visit;
        first_visit = std::numeric_limits<int>::min();
        
        int col_i;
        col_i = std::numeric_limits<int>::min();
        
        int row_i;
        row_i = std::numeric_limits<int>::min();
        
        int col_n;
        col_n = std::numeric_limits<int>::min();
        
        int row_n;
        row_n = std::numeric_limits<int>::min();
        
        current_statement__ = 22;
        validate_non_negative_index("alpha_latent", "n_alpha + 1",
                                    (n_alpha + 1));
        Eigen::Matrix<double, -1, 1> alpha_latent;
        alpha_latent = Eigen::Matrix<double, -1, 1>((n_alpha + 1));
        stan::math::fill(alpha_latent, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 24;
        validate_non_negative_index("delta_latent", "n_delta + 1",
                                    (n_delta + 1));
        Eigen::Matrix<double, -1, 1> delta_latent;
        delta_latent = Eigen::Matrix<double, -1, 1>((n_delta + 1));
        stan::math::fill(delta_latent, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 26;
        validate_non_negative_index("x_beta_vector", "n_patient", n_patient);
        Eigen::Matrix<double, -1, 1> x_beta_vector;
        x_beta_vector = Eigen::Matrix<double, -1, 1>(n_patient);
        stan::math::fill(x_beta_vector, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 28;
        validate_non_negative_index("means", "n_observe", n_observe);
        Eigen::Matrix<double, -1, 1> means;
        means = Eigen::Matrix<double, -1, 1>(n_observe);
        stan::math::fill(means, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 30;
        validate_non_negative_index("means_matrix", "n_rep", n_rep);
        current_statement__ = 31;
        validate_non_negative_index("means_matrix", "n_patient", n_patient);
        Eigen::Matrix<double, -1, -1> means_matrix;
        means_matrix = Eigen::Matrix<double, -1, -1>(n_rep, n_patient);
        stan::math::fill(means_matrix, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 33;
        validate_non_negative_index("y_imputed", "n_observe", n_observe);
        Eigen::Matrix<double, -1, 1> y_imputed;
        y_imputed = Eigen::Matrix<double, -1, 1>(n_observe);
        stan::math::fill(y_imputed, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 35;
        validate_non_negative_index("y_matrix", "n_rep", n_rep);
        current_statement__ = 36;
        validate_non_negative_index("y_matrix", "n_patient", n_patient);
        Eigen::Matrix<double, -1, -1> y_matrix;
        y_matrix = Eigen::Matrix<double, -1, -1>(n_rep, n_patient);
        stan::math::fill(y_matrix, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 42;
        if (logical_eq(model_type, 3)) {
          current_statement__ = 40;
          assign(alpha, nil_index_list(),
            add(
              rvalue(mu,
                cons_list(index_multi(alpha_rep_index), nil_index_list()),
                "mu"),
              elt_multiply(
                rvalue(tau,
                  cons_list(index_multi(alpha_rep_index), nil_index_list()),
                  "tau"), alpha_raw)), "assigning variable alpha");
        } else {
          current_statement__ = 38;
          assign(alpha, nil_index_list(), alpha_raw,
            "assigning variable alpha");
        }
        current_statement__ = 43;
        assign(alpha_latent, cons_list(index_uni(1), nil_index_list()), 0,
          "assigning variable alpha_latent");
        current_statement__ = 44;
        assign(alpha_latent,
          cons_list(index_min_max(2, (n_alpha + 1)), nil_index_list()),
          alpha, "assigning variable alpha_latent");
        current_statement__ = 45;
        assign(delta_latent, cons_list(index_uni(1), nil_index_list()), 0,
          "assigning variable delta_latent");
        current_statement__ = 46;
        assign(delta_latent,
          cons_list(index_min_max(2, (n_delta + 1)), nil_index_list()),
          delta, "assigning variable delta_latent");
        current_statement__ = 47;
        assign(x_beta_vector, nil_index_list(), rep_vector(0, n_patient),
          "assigning variable x_beta_vector");
        current_statement__ = 56;
        if (logical_gt(n_beta, 0)) {
          current_statement__ = 54;
          for (int i = 1; i <= n_study_x_beta; ++i) {
            current_statement__ = 48;
            col_i = x_beta_col_index[(i - 1)];
            current_statement__ = 49;
            row_i = x_beta_row_index[(i - 1)];
            current_statement__ = 50;
            col_n = x_beta_col_n[(i - 1)];
            current_statement__ = 51;
            row_n = x_beta_row_n[(i - 1)];
            current_statement__ = 52;
            assign(x_beta_vector,
              cons_list(index_min_max(col_i, ((col_i + col_n) - 1)),
                nil_index_list()),
              transpose(
                multiply(
                  transpose(
                    rvalue(beta,
                      cons_list(index_min_max(row_i, ((row_i + row_n) - 1)),
                        nil_index_list()), "beta")),
                  block(x_beta, row_i, col_i, row_n, col_n))),
              "assigning variable x_beta_vector");}
        } 
        current_statement__ = 61;
        if (logical_gt(n_beta, 0)) {
          current_statement__ = 59;
          assign(means, nil_index_list(),
            add(
              add(
                rvalue(alpha_latent,
                  cons_list(index_multi(alpha_data_index), nil_index_list()),
                  "alpha_latent"),
                rvalue(delta_latent,
                  cons_list(index_multi(delta_data_index), nil_index_list()),
                  "delta_latent")),
              rvalue(x_beta_vector,
                cons_list(index_multi(index_patient), nil_index_list()),
                "x_beta_vector")), "assigning variable means");
        } else {
          current_statement__ = 57;
          assign(means, nil_index_list(),
            add(
              rvalue(alpha_latent,
                cons_list(index_multi(alpha_data_index), nil_index_list()),
                "alpha_latent"),
              rvalue(delta_latent,
                cons_list(index_multi(delta_data_index), nil_index_list()),
                "delta_latent")), "assigning variable means");
        }
        current_statement__ = 69;
        if (logical_eq(covariance_current, covariance_unstructured)) {
          current_statement__ = 67;
          assign(covariance_cholesky,
            cons_list(index_uni(n_study), nil_index_list()),
            diag_pre_multiply(sigma[(n_study - 1)], lambda_current[(1 - 1)]),
            "assigning variable covariance_cholesky");
        } else {
          current_statement__ = 66;
          if (logical_eq(covariance_current, covariance_ar1)) {
            current_statement__ = 64;
            assign(covariance_cholesky,
              cons_list(index_uni(n_study), nil_index_list()),
              diag_pre_multiply(sigma[(n_study - 1)],
                ar1_cholesky(rho_current[(1 - 1)], n_rep, pstream__)),
              "assigning variable covariance_cholesky");
          } else {
            current_statement__ = 62;
            assign(covariance_cholesky,
              cons_list(index_uni(n_study), nil_index_list()),
              diag_matrix(sigma[(n_study - 1)]),
              "assigning variable covariance_cholesky");
          }
        }
        current_statement__ = 79;
        for (int i = 1; i <= (n_study - 1); ++i) {
          current_statement__ = 77;
          if (logical_eq(covariance_historical, covariance_unstructured)) {
            current_statement__ = 75;
            assign(covariance_cholesky,
              cons_list(index_uni(i), nil_index_list()),
              diag_pre_multiply(sigma[(i - 1)], lambda_historical[(i - 1)]),
              "assigning variable covariance_cholesky");
          } else {
            current_statement__ = 74;
            if (logical_eq(covariance_historical, covariance_ar1)) {
              current_statement__ = 72;
              assign(covariance_cholesky,
                cons_list(index_uni(i), nil_index_list()),
                diag_pre_multiply(sigma[(i - 1)],
                  ar1_cholesky(rho_historical[(i - 1)], n_rep, pstream__)),
                "assigning variable covariance_cholesky");
            } else {
              current_statement__ = 70;
              assign(covariance_cholesky,
                cons_list(index_uni(i), nil_index_list()),
                diag_matrix(sigma[(i - 1)]),
                "assigning variable covariance_cholesky");
            }
          }}
        current_statement__ = 82;
        for (int observation = 1; observation <= n_observe; ++observation) {
          current_statement__ = 80;
          assign(y_imputed,
            cons_list(index_uni(observation), nil_index_list()),
            (logical_eq(missing[(observation - 1)], 1) ?
               stan::math::promote_scalar<local_scalar_t__>(y_missing[
               (count_missing[(observation - 1)] - 1)]) :
               stan::math::promote_scalar<local_scalar_t__>(y[(observation -
                                                                1)])),
            "assigning variable y_imputed");}
        current_statement__ = 83;
        index = 1;
        current_statement__ = 88;
        for (int patient = 1; patient <= n_patient; ++patient) {
          current_statement__ = 84;
          assign(y_matrix,
            cons_list(index_omni(),
              cons_list(index_uni(patient), nil_index_list())),
            segment(y_imputed, index, n_rep), "assigning variable y_matrix");
          current_statement__ = 85;
          assign(means_matrix,
            cons_list(index_omni(),
              cons_list(index_uni(patient), nil_index_list())),
            segment(means, index, n_rep), "assigning variable means_matrix");
          current_statement__ = 86;
          index = (index + n_rep);}
        current_statement__ = 89;
        assign(epsilon, nil_index_list(), subtract(y_matrix, means_matrix),
          "assigning variable epsilon");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
          vars__.emplace_back(alpha[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            vars__.emplace_back(
              rvalue(epsilon,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "epsilon"));
          }}
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
              vars__.emplace_back(
                rvalue(covariance_cholesky,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "covariance_cholesky"));}}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> y_missing;
      y_missing = Eigen::Matrix<double, -1, 1>(n_missing);
      stan::math::fill(y_missing, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_missing_flat__;
        current_statement__ = 1;
        assign(y_missing_flat__, nil_index_list(),
          context__.vals_r("y_missing"),
          "assigning variable y_missing_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
          current_statement__ = 1;
          assign(y_missing, cons_list(index_uni(sym1__), nil_index_list()),
            y_missing_flat__[(pos__ - 1)], "assigning variable y_missing");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<double, -1, 1>(n_alpha);
      stan::math::fill(alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_raw_flat__;
        current_statement__ = 2;
        assign(alpha_raw_flat__, nil_index_list(),
          context__.vals_r("alpha_raw"),
          "assigning variable alpha_raw_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
          current_statement__ = 2;
          assign(alpha_raw, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_raw_flat__[(pos__ - 1)], "assigning variable alpha_raw");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(n_mu);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 3;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
          current_statement__ = 3;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(n_tau);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 4;
        assign(tau_flat__, nil_index_list(), context__.vals_r("tau"),
          "assigning variable tau_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
          current_statement__ = 4;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            tau_flat__[(pos__ - 1)], "assigning variable tau");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tau_free__;
      tau_free__ = Eigen::Matrix<double, -1, 1>(n_tau);
      stan::math::fill(tau_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
        current_statement__ = 4;
        assign(tau_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(tau[(sym1__ - 1)], 0, s_tau),
          "assigning variable tau_free__");}
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(n_delta);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 5;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
          current_statement__ = 5;
          assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
            delta_flat__[(pos__ - 1)], "assigning variable delta");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(n_beta);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 6;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
          current_statement__ = 6;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> sigma;
      sigma = std::vector<Eigen::Matrix<double, -1, 1>>(n_study, Eigen::Matrix<double, -1, 1>(n_rep));
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 7;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
            current_statement__ = 7;
            assign(sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sigma_flat__[(pos__ - 1)], "assigning variable sigma");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> sigma_free__;
      sigma_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(n_study, Eigen::Matrix<double, -1, 1>(n_rep));
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          current_statement__ = 7;
          assign(sigma_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(sigma[(sym1__ - 1)][(sym2__ - 1)], 0,
              s_sigma), "assigning variable sigma_free__");}}
      std::vector<Eigen::Matrix<double, -1, -1>> lambda_current;
      lambda_current = std::vector<Eigen::Matrix<double, -1, -1>>(n_lambda_current, Eigen::Matrix<double, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_current, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_current_flat__;
        current_statement__ = 8;
        assign(lambda_current_flat__, nil_index_list(),
          context__.vals_r("lambda_current"),
          "assigning variable lambda_current_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
              current_statement__ = 8;
              assign(lambda_current,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                lambda_current_flat__[(pos__ - 1)],
                "assigning variable lambda_current");
              current_statement__ = 8;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> lambda_current_free__;
      lambda_current_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(n_lambda_current, Eigen::Matrix<double, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_current_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        current_statement__ = 8;
        assign(lambda_current_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_free(lambda_current[(sym1__ - 1)]),
          "assigning variable lambda_current_free__");}
      std::vector<Eigen::Matrix<double, -1, -1>> lambda_historical;
      lambda_historical = std::vector<Eigen::Matrix<double, -1, -1>>(n_lambda_historical, Eigen::Matrix<double, -1, -1>(n_rep, n_rep));
      stan::math::fill(lambda_historical, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_historical_flat__;
        current_statement__ = 9;
        assign(lambda_historical_flat__, nil_index_list(),
          context__.vals_r("lambda_historical"),
          "assigning variable lambda_historical_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            current_statement__ = 9;
            for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
              current_statement__ = 9;
              assign(lambda_historical,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                lambda_historical_flat__[(pos__ - 1)],
                "assigning variable lambda_historical");
              current_statement__ = 9;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> lambda_historical_free__;
      lambda_historical_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(n_lambda_historical, Eigen::Matrix<double, -1, 1>(
        ((n_rep * (n_rep - 1)) / 2)));
      stan::math::fill(lambda_historical_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        current_statement__ = 9;
        assign(lambda_historical_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_free(lambda_historical[(sym1__ - 1)]),
          "assigning variable lambda_historical_free__");}
      Eigen::Matrix<double, -1, 1> rho_current;
      rho_current = Eigen::Matrix<double, -1, 1>(n_rho_current);
      stan::math::fill(rho_current, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_current_flat__;
        current_statement__ = 10;
        assign(rho_current_flat__, nil_index_list(),
          context__.vals_r("rho_current"),
          "assigning variable rho_current_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
          current_statement__ = 10;
          assign(rho_current, cons_list(index_uni(sym1__), nil_index_list()),
            rho_current_flat__[(pos__ - 1)], "assigning variable rho_current");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rho_current_free__;
      rho_current_free__ = Eigen::Matrix<double, -1, 1>(n_rho_current);
      stan::math::fill(rho_current_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
        current_statement__ = 10;
        assign(rho_current_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(rho_current[(sym1__ - 1)], -1, 1),
          "assigning variable rho_current_free__");}
      Eigen::Matrix<double, -1, 1> rho_historical;
      rho_historical = Eigen::Matrix<double, -1, 1>(n_rho_historical);
      stan::math::fill(rho_historical, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_historical_flat__;
        current_statement__ = 11;
        assign(rho_historical_flat__, nil_index_list(),
          context__.vals_r("rho_historical"),
          "assigning variable rho_historical_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
          current_statement__ = 11;
          assign(rho_historical,
            cons_list(index_uni(sym1__), nil_index_list()),
            rho_historical_flat__[(pos__ - 1)],
            "assigning variable rho_historical");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rho_historical_free__;
      rho_historical_free__ = Eigen::Matrix<double, -1, 1>(n_rho_historical);
      stan::math::fill(rho_historical_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
        current_statement__ = 11;
        assign(rho_historical_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(rho_historical[(sym1__ - 1)], -1, 1),
          "assigning variable rho_historical_free__");}
      for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
        vars__.emplace_back(y_missing[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        vars__.emplace_back(alpha_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
        vars__.emplace_back(tau_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_study; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          vars__.emplace_back(sigma_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_lambda_current; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ((n_rep * (n_rep - 1)) / 2); ++sym2__) {
          vars__.emplace_back(
            lambda_current_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_lambda_historical; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ((n_rep * (n_rep - 1)) / 2); ++sym2__) {
          vars__.emplace_back(
            lambda_historical_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
        vars__.emplace_back(rho_current_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
        vars__.emplace_back(rho_historical_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("y_missing");
    names__.emplace_back("alpha_raw");
    names__.emplace_back("mu");
    names__.emplace_back("tau");
    names__.emplace_back("delta");
    names__.emplace_back("beta");
    names__.emplace_back("sigma");
    names__.emplace_back("lambda_current");
    names__.emplace_back("lambda_historical");
    names__.emplace_back("rho_current");
    names__.emplace_back("rho_historical");
    names__.emplace_back("alpha");
    names__.emplace_back("epsilon");
    names__.emplace_back("covariance_cholesky");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_missing)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_alpha)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_mu)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_tau)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_delta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_beta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_study),
                                             static_cast<size_t>(n_rep)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_lambda_current)
                                             , static_cast<size_t>(n_rep),
                                             static_cast<size_t>(n_rep)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_lambda_historical)
                                             , static_cast<size_t>(n_rep),
                                             static_cast<size_t>(n_rep)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_rho_current)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_rho_historical)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_alpha)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_rep),
                                             static_cast<size_t>(n_patient)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_study),
                                             static_cast<size_t>(n_rep),
                                             static_cast<size_t>(n_rep)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n_lambda_current; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "lambda_current" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n_lambda_historical; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "lambda_historical" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_current" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_historical" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "covariance_cholesky" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_missing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_missing" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_tau; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_delta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_beta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_study; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((n_rep * (n_rep - 1)) / 2); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_lambda_current; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lambda_current" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((n_rep * (n_rep - 1)) / 2); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_lambda_historical; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lambda_historical" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_rho_current; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_current" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_rho_historical; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho_historical" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_alpha; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_patient; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_rep; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n_study; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "covariance_cholesky" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" << n_missing << "},\"block\":\"parameters\"},{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << n_alpha << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n_mu << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << n_tau << "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << n_delta << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << n_beta << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << n_study << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_rep << "}},\"block\":\"parameters\"},{\"name\":\"lambda_current\",\"type\":{\"name\":\"array\",\"length\":" << n_lambda_current << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_rep << "}},\"block\":\"parameters\"},{\"name\":\"lambda_historical\",\"type\":{\"name\":\"array\",\"length\":" << n_lambda_historical << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_rep << "}},\"block\":\"parameters\"},{\"name\":\"rho_current\",\"type\":{\"name\":\"vector\",\"length\":" << n_rho_current << "},\"block\":\"parameters\"},{\"name\":\"rho_historical\",\"type\":{\"name\":\"vector\",\"length\":" << n_rho_historical << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << n_alpha << "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_patient << "},\"block\":\"transformed_parameters\"},{\"name\":\"covariance_cholesky\",\"type\":{\"name\":\"array\",\"length\":" << n_study << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_rep << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" << n_missing << "},\"block\":\"parameters\"},{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << n_alpha << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << n_mu << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << n_tau << "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << n_delta << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << n_beta << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << n_study << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_rep << "}},\"block\":\"parameters\"},{\"name\":\"lambda_current\",\"type\":{\"name\":\"array\",\"length\":" << n_lambda_current << ",\"element_type\":{\"name\":\"vector\",\"length\":" << ((n_rep * (n_rep - 1)) / 2) << "}},\"block\":\"parameters\"},{\"name\":\"lambda_historical\",\"type\":{\"name\":\"array\",\"length\":" << n_lambda_historical << ",\"element_type\":{\"name\":\"vector\",\"length\":" << ((n_rep * (n_rep - 1)) / 2) << "}},\"block\":\"parameters\"},{\"name\":\"rho_current\",\"type\":{\"name\":\"vector\",\"length\":" << n_rho_current << "},\"block\":\"parameters\"},{\"name\":\"rho_historical\",\"type\":{\"name\":\"vector\",\"length\":" << n_rho_historical << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << n_alpha << "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_patient << "},\"block\":\"transformed_parameters\"},{\"name\":\"covariance_cholesky\",\"type\":{\"name\":\"array\",\"length\":" << n_study << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_rep << ",\"cols\":" << n_rep << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_historicalborrowlong_namespace::model_historicalborrowlong;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_historicalborrowlong_namespace::profiles__;
}
#endif
#endif
